/*
 * SendPost API
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ModelsQEmailMessage;
import io.swagger.client.model.ModelsQEvent;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountmessageApi {
    private ApiClient apiClient;

    public AccountmessageApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountmessageApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for messageRouterGet
     * @param xAccountApiKey Sub-Account API Key (required)
     * @param messageId the messageId that you want to retrieve (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call messageRouterGetCall(String xAccountApiKey, String messageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/message/{messageId}"
            .replaceAll("\\{" + "messageId" + "\\}", apiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccountApiKey != null)
        localVarHeaderParams.put("X-Account-ApiKey", apiClient.parameterToString(xAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call messageRouterGetValidateBeforeCall(String xAccountApiKey, String messageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xAccountApiKey' is set
        if (xAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xAccountApiKey' when calling messageRouterGet(Async)");
        }
        
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling messageRouterGet(Async)");
        }
        

        com.squareup.okhttp.Call call = messageRouterGetCall(xAccountApiKey, messageId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Find Message By Id
     * @param xAccountApiKey Sub-Account API Key (required)
     * @param messageId the messageId that you want to retrieve (required)
     * @return ModelsQEmailMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelsQEmailMessage messageRouterGet(String xAccountApiKey, String messageId) throws ApiException {
        ApiResponse<ModelsQEmailMessage> resp = messageRouterGetWithHttpInfo(xAccountApiKey, messageId);
        return resp.getData();
    }

    /**
     * 
     * Find Message By Id
     * @param xAccountApiKey Sub-Account API Key (required)
     * @param messageId the messageId that you want to retrieve (required)
     * @return ApiResponse&lt;ModelsQEmailMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelsQEmailMessage> messageRouterGetWithHttpInfo(String xAccountApiKey, String messageId) throws ApiException {
        com.squareup.okhttp.Call call = messageRouterGetValidateBeforeCall(xAccountApiKey, messageId, null, null);
        Type localVarReturnType = new TypeToken<ModelsQEmailMessage>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Find Message By Id
     * @param xAccountApiKey Sub-Account API Key (required)
     * @param messageId the messageId that you want to retrieve (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call messageRouterGetAsync(String xAccountApiKey, String messageId, final ApiCallback<ModelsQEmailMessage> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = messageRouterGetValidateBeforeCall(xAccountApiKey, messageId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelsQEmailMessage>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for messageRouterGetAllEventsForAMessageId
     * @param xAccountApiKey Account API Key (required)
     * @param messageId the messageId that you want to retrieve (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call messageRouterGetAllEventsForAMessageIdCall(String xAccountApiKey, String messageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/message/{messageId}/events"
            .replaceAll("\\{" + "messageId" + "\\}", apiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccountApiKey != null)
        localVarHeaderParams.put("X-Account-ApiKey", apiClient.parameterToString(xAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call messageRouterGetAllEventsForAMessageIdValidateBeforeCall(String xAccountApiKey, String messageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xAccountApiKey' is set
        if (xAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xAccountApiKey' when calling messageRouterGetAllEventsForAMessageId(Async)");
        }
        
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling messageRouterGetAllEventsForAMessageId(Async)");
        }
        

        com.squareup.okhttp.Call call = messageRouterGetAllEventsForAMessageIdCall(xAccountApiKey, messageId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Find all events associated with a message id
     * @param xAccountApiKey Account API Key (required)
     * @param messageId the messageId that you want to retrieve (required)
     * @return List&lt;ModelsQEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ModelsQEvent> messageRouterGetAllEventsForAMessageId(String xAccountApiKey, String messageId) throws ApiException {
        ApiResponse<List<ModelsQEvent>> resp = messageRouterGetAllEventsForAMessageIdWithHttpInfo(xAccountApiKey, messageId);
        return resp.getData();
    }

    /**
     * 
     * Find all events associated with a message id
     * @param xAccountApiKey Account API Key (required)
     * @param messageId the messageId that you want to retrieve (required)
     * @return ApiResponse&lt;List&lt;ModelsQEvent&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ModelsQEvent>> messageRouterGetAllEventsForAMessageIdWithHttpInfo(String xAccountApiKey, String messageId) throws ApiException {
        com.squareup.okhttp.Call call = messageRouterGetAllEventsForAMessageIdValidateBeforeCall(xAccountApiKey, messageId, null, null);
        Type localVarReturnType = new TypeToken<List<ModelsQEvent>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Find all events associated with a message id
     * @param xAccountApiKey Account API Key (required)
     * @param messageId the messageId that you want to retrieve (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call messageRouterGetAllEventsForAMessageIdAsync(String xAccountApiKey, String messageId, final ApiCallback<List<ModelsQEvent>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = messageRouterGetAllEventsForAMessageIdValidateBeforeCall(xAccountApiKey, messageId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ModelsQEvent>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for messageRouterGetAllEventsForAMessageIdFromANode
     * @param xAccountApiKey Account API Key (required)
     * @param messageId the messageId that you want to retrieve (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call messageRouterGetAllEventsForAMessageIdFromANodeCall(String xAccountApiKey, String messageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/message/node/{messageId}/events"
            .replaceAll("\\{" + "messageId" + "\\}", apiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccountApiKey != null)
        localVarHeaderParams.put("X-Account-ApiKey", apiClient.parameterToString(xAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call messageRouterGetAllEventsForAMessageIdFromANodeValidateBeforeCall(String xAccountApiKey, String messageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xAccountApiKey' is set
        if (xAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xAccountApiKey' when calling messageRouterGetAllEventsForAMessageIdFromANode(Async)");
        }
        
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling messageRouterGetAllEventsForAMessageIdFromANode(Async)");
        }
        

        com.squareup.okhttp.Call call = messageRouterGetAllEventsForAMessageIdFromANodeCall(xAccountApiKey, messageId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Find all message events associated with a message id from a specific node
     * @param xAccountApiKey Account API Key (required)
     * @param messageId the messageId that you want to retrieve (required)
     * @return List&lt;ModelsQEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ModelsQEvent> messageRouterGetAllEventsForAMessageIdFromANode(String xAccountApiKey, String messageId) throws ApiException {
        ApiResponse<List<ModelsQEvent>> resp = messageRouterGetAllEventsForAMessageIdFromANodeWithHttpInfo(xAccountApiKey, messageId);
        return resp.getData();
    }

    /**
     * 
     * Find all message events associated with a message id from a specific node
     * @param xAccountApiKey Account API Key (required)
     * @param messageId the messageId that you want to retrieve (required)
     * @return ApiResponse&lt;List&lt;ModelsQEvent&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ModelsQEvent>> messageRouterGetAllEventsForAMessageIdFromANodeWithHttpInfo(String xAccountApiKey, String messageId) throws ApiException {
        com.squareup.okhttp.Call call = messageRouterGetAllEventsForAMessageIdFromANodeValidateBeforeCall(xAccountApiKey, messageId, null, null);
        Type localVarReturnType = new TypeToken<List<ModelsQEvent>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Find all message events associated with a message id from a specific node
     * @param xAccountApiKey Account API Key (required)
     * @param messageId the messageId that you want to retrieve (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call messageRouterGetAllEventsForAMessageIdFromANodeAsync(String xAccountApiKey, String messageId, final ApiCallback<List<ModelsQEvent>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = messageRouterGetAllEventsForAMessageIdFromANodeValidateBeforeCall(xAccountApiKey, messageId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ModelsQEvent>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for messageRouterGetMessageFromNode
     * @param xAccountApiKey Account API Key (required)
     * @param messageId the messageId that you want to retrieve (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call messageRouterGetMessageFromNodeCall(String xAccountApiKey, String messageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/message/node/{messageId}"
            .replaceAll("\\{" + "messageId" + "\\}", apiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccountApiKey != null)
        localVarHeaderParams.put("X-Account-ApiKey", apiClient.parameterToString(xAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call messageRouterGetMessageFromNodeValidateBeforeCall(String xAccountApiKey, String messageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xAccountApiKey' is set
        if (xAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xAccountApiKey' when calling messageRouterGetMessageFromNode(Async)");
        }
        
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling messageRouterGetMessageFromNode(Async)");
        }
        

        com.squareup.okhttp.Call call = messageRouterGetMessageFromNodeCall(xAccountApiKey, messageId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Find Message from node by specific Id
     * @param xAccountApiKey Account API Key (required)
     * @param messageId the messageId that you want to retrieve (required)
     * @return ModelsQEmailMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelsQEmailMessage messageRouterGetMessageFromNode(String xAccountApiKey, String messageId) throws ApiException {
        ApiResponse<ModelsQEmailMessage> resp = messageRouterGetMessageFromNodeWithHttpInfo(xAccountApiKey, messageId);
        return resp.getData();
    }

    /**
     * 
     * Find Message from node by specific Id
     * @param xAccountApiKey Account API Key (required)
     * @param messageId the messageId that you want to retrieve (required)
     * @return ApiResponse&lt;ModelsQEmailMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelsQEmailMessage> messageRouterGetMessageFromNodeWithHttpInfo(String xAccountApiKey, String messageId) throws ApiException {
        com.squareup.okhttp.Call call = messageRouterGetMessageFromNodeValidateBeforeCall(xAccountApiKey, messageId, null, null);
        Type localVarReturnType = new TypeToken<ModelsQEmailMessage>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Find Message from node by specific Id
     * @param xAccountApiKey Account API Key (required)
     * @param messageId the messageId that you want to retrieve (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call messageRouterGetMessageFromNodeAsync(String xAccountApiKey, String messageId, final ApiCallback<ModelsQEmailMessage> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = messageRouterGetMessageFromNodeValidateBeforeCall(xAccountApiKey, messageId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelsQEmailMessage>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
