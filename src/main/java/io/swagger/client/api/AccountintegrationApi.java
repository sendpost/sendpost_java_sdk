/*
 * SendPost API
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ModelsCountStat;
import io.swagger.client.model.ModelsDeleteResponse;
import io.swagger.client.model.ModelsEIntegration;
import io.swagger.client.model.ModelsIntegration;
import io.swagger.client.model.ModelsRGlockappsMonitorStat;
import io.swagger.client.model.ModelsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountintegrationApi {
    private ApiClient apiClient;

    public AccountintegrationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountintegrationApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for accountIntegrationRouterCount
     * @param xAccountApiKey Account API Key (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accountIntegrationRouterCountCall(String xAccountApiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/integration/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccountApiKey != null)
        localVarHeaderParams.put("X-Account-ApiKey", apiClient.parameterToString(xAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accountIntegrationRouterCountValidateBeforeCall(String xAccountApiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xAccountApiKey' is set
        if (xAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xAccountApiKey' when calling accountIntegrationRouterCount(Async)");
        }
        

        com.squareup.okhttp.Call call = accountIntegrationRouterCountCall(xAccountApiKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Count Total AccountIntegrations
     * @param xAccountApiKey Account API Key (required)
     * @return ModelsCountStat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelsCountStat accountIntegrationRouterCount(String xAccountApiKey) throws ApiException {
        ApiResponse<ModelsCountStat> resp = accountIntegrationRouterCountWithHttpInfo(xAccountApiKey);
        return resp.getData();
    }

    /**
     * 
     * Count Total AccountIntegrations
     * @param xAccountApiKey Account API Key (required)
     * @return ApiResponse&lt;ModelsCountStat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelsCountStat> accountIntegrationRouterCountWithHttpInfo(String xAccountApiKey) throws ApiException {
        com.squareup.okhttp.Call call = accountIntegrationRouterCountValidateBeforeCall(xAccountApiKey, null, null);
        Type localVarReturnType = new TypeToken<ModelsCountStat>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Count Total AccountIntegrations
     * @param xAccountApiKey Account API Key (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accountIntegrationRouterCountAsync(String xAccountApiKey, final ApiCallback<ModelsCountStat> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accountIntegrationRouterCountValidateBeforeCall(xAccountApiKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelsCountStat>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for accountIntegrationRouterCreate
     * @param xAccountApiKey Account API Key (required)
     * @param itype The integration type you want to create (required)
     * @param body The Integration content (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accountIntegrationRouterCreateCall(String xAccountApiKey, String itype, ModelsEIntegration body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/account/integration/{itype}"
            .replaceAll("\\{" + "itype" + "\\}", apiClient.escapeString(itype.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccountApiKey != null)
        localVarHeaderParams.put("X-Account-ApiKey", apiClient.parameterToString(xAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accountIntegrationRouterCreateValidateBeforeCall(String xAccountApiKey, String itype, ModelsEIntegration body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xAccountApiKey' is set
        if (xAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xAccountApiKey' when calling accountIntegrationRouterCreate(Async)");
        }
        
        // verify the required parameter 'itype' is set
        if (itype == null) {
            throw new ApiException("Missing the required parameter 'itype' when calling accountIntegrationRouterCreate(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling accountIntegrationRouterCreate(Async)");
        }
        

        com.squareup.okhttp.Call call = accountIntegrationRouterCreateCall(xAccountApiKey, itype, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create Integration
     * @param xAccountApiKey Account API Key (required)
     * @param itype The integration type you want to create (required)
     * @param body The Integration content (required)
     * @return ModelsIntegration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelsIntegration accountIntegrationRouterCreate(String xAccountApiKey, String itype, ModelsEIntegration body) throws ApiException {
        ApiResponse<ModelsIntegration> resp = accountIntegrationRouterCreateWithHttpInfo(xAccountApiKey, itype, body);
        return resp.getData();
    }

    /**
     * 
     * Create Integration
     * @param xAccountApiKey Account API Key (required)
     * @param itype The integration type you want to create (required)
     * @param body The Integration content (required)
     * @return ApiResponse&lt;ModelsIntegration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelsIntegration> accountIntegrationRouterCreateWithHttpInfo(String xAccountApiKey, String itype, ModelsEIntegration body) throws ApiException {
        com.squareup.okhttp.Call call = accountIntegrationRouterCreateValidateBeforeCall(xAccountApiKey, itype, body, null, null);
        Type localVarReturnType = new TypeToken<ModelsIntegration>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create Integration
     * @param xAccountApiKey Account API Key (required)
     * @param itype The integration type you want to create (required)
     * @param body The Integration content (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accountIntegrationRouterCreateAsync(String xAccountApiKey, String itype, ModelsEIntegration body, final ApiCallback<ModelsIntegration> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accountIntegrationRouterCreateValidateBeforeCall(xAccountApiKey, itype, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelsIntegration>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for accountIntegrationRouterDelete
     * @param xAccountApiKey Account API Key (required)
     * @param itype The integration type you want to update (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accountIntegrationRouterDeleteCall(String xAccountApiKey, String itype, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/integration/{itype}"
            .replaceAll("\\{" + "itype" + "\\}", apiClient.escapeString(itype.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccountApiKey != null)
        localVarHeaderParams.put("X-Account-ApiKey", apiClient.parameterToString(xAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accountIntegrationRouterDeleteValidateBeforeCall(String xAccountApiKey, String itype, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xAccountApiKey' is set
        if (xAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xAccountApiKey' when calling accountIntegrationRouterDelete(Async)");
        }
        
        // verify the required parameter 'itype' is set
        if (itype == null) {
            throw new ApiException("Missing the required parameter 'itype' when calling accountIntegrationRouterDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = accountIntegrationRouterDeleteCall(xAccountApiKey, itype, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete Integration
     * @param xAccountApiKey Account API Key (required)
     * @param itype The integration type you want to update (required)
     * @return ModelsDeleteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelsDeleteResponse accountIntegrationRouterDelete(String xAccountApiKey, String itype) throws ApiException {
        ApiResponse<ModelsDeleteResponse> resp = accountIntegrationRouterDeleteWithHttpInfo(xAccountApiKey, itype);
        return resp.getData();
    }

    /**
     * 
     * Delete Integration
     * @param xAccountApiKey Account API Key (required)
     * @param itype The integration type you want to update (required)
     * @return ApiResponse&lt;ModelsDeleteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelsDeleteResponse> accountIntegrationRouterDeleteWithHttpInfo(String xAccountApiKey, String itype) throws ApiException {
        com.squareup.okhttp.Call call = accountIntegrationRouterDeleteValidateBeforeCall(xAccountApiKey, itype, null, null);
        Type localVarReturnType = new TypeToken<ModelsDeleteResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete Integration
     * @param xAccountApiKey Account API Key (required)
     * @param itype The integration type you want to update (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accountIntegrationRouterDeleteAsync(String xAccountApiKey, String itype, final ApiCallback<ModelsDeleteResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accountIntegrationRouterDeleteValidateBeforeCall(xAccountApiKey, itype, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelsDeleteResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for accountIntegrationRouterDisableGlockappsIPMonitoring
     * @param xAccountApiKey Account API Key (required)
     * @param ipid the IPId you want to disable monitoring for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accountIntegrationRouterDisableGlockappsIPMonitoringCall(String xAccountApiKey, Long ipid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/integration/glockapps/monitor/{ipid}"
            .replaceAll("\\{" + "ipid" + "\\}", apiClient.escapeString(ipid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccountApiKey != null)
        localVarHeaderParams.put("X-Account-ApiKey", apiClient.parameterToString(xAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accountIntegrationRouterDisableGlockappsIPMonitoringValidateBeforeCall(String xAccountApiKey, Long ipid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xAccountApiKey' is set
        if (xAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xAccountApiKey' when calling accountIntegrationRouterDisableGlockappsIPMonitoring(Async)");
        }
        
        // verify the required parameter 'ipid' is set
        if (ipid == null) {
            throw new ApiException("Missing the required parameter 'ipid' when calling accountIntegrationRouterDisableGlockappsIPMonitoring(Async)");
        }
        

        com.squareup.okhttp.Call call = accountIntegrationRouterDisableGlockappsIPMonitoringCall(xAccountApiKey, ipid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Disable IP Monitoring for a single IP
     * @param xAccountApiKey Account API Key (required)
     * @param ipid the IPId you want to disable monitoring for (required)
     * @return ModelsDeleteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelsDeleteResponse accountIntegrationRouterDisableGlockappsIPMonitoring(String xAccountApiKey, Long ipid) throws ApiException {
        ApiResponse<ModelsDeleteResponse> resp = accountIntegrationRouterDisableGlockappsIPMonitoringWithHttpInfo(xAccountApiKey, ipid);
        return resp.getData();
    }

    /**
     * 
     * Disable IP Monitoring for a single IP
     * @param xAccountApiKey Account API Key (required)
     * @param ipid the IPId you want to disable monitoring for (required)
     * @return ApiResponse&lt;ModelsDeleteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelsDeleteResponse> accountIntegrationRouterDisableGlockappsIPMonitoringWithHttpInfo(String xAccountApiKey, Long ipid) throws ApiException {
        com.squareup.okhttp.Call call = accountIntegrationRouterDisableGlockappsIPMonitoringValidateBeforeCall(xAccountApiKey, ipid, null, null);
        Type localVarReturnType = new TypeToken<ModelsDeleteResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Disable IP Monitoring for a single IP
     * @param xAccountApiKey Account API Key (required)
     * @param ipid the IPId you want to disable monitoring for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accountIntegrationRouterDisableGlockappsIPMonitoringAsync(String xAccountApiKey, Long ipid, final ApiCallback<ModelsDeleteResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accountIntegrationRouterDisableGlockappsIPMonitoringValidateBeforeCall(xAccountApiKey, ipid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelsDeleteResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for accountIntegrationRouterEnableGlockappsIPMonitoring
     * @param xAccountApiKey Account API Key (required)
     * @param ipid the IPId you want to enable monitoring for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accountIntegrationRouterEnableGlockappsIPMonitoringCall(String xAccountApiKey, Long ipid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/integration/glockapps/monitor/{ipid}"
            .replaceAll("\\{" + "ipid" + "\\}", apiClient.escapeString(ipid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccountApiKey != null)
        localVarHeaderParams.put("X-Account-ApiKey", apiClient.parameterToString(xAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accountIntegrationRouterEnableGlockappsIPMonitoringValidateBeforeCall(String xAccountApiKey, Long ipid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xAccountApiKey' is set
        if (xAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xAccountApiKey' when calling accountIntegrationRouterEnableGlockappsIPMonitoring(Async)");
        }
        
        // verify the required parameter 'ipid' is set
        if (ipid == null) {
            throw new ApiException("Missing the required parameter 'ipid' when calling accountIntegrationRouterEnableGlockappsIPMonitoring(Async)");
        }
        

        com.squareup.okhttp.Call call = accountIntegrationRouterEnableGlockappsIPMonitoringCall(xAccountApiKey, ipid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Enable IP Monitoring for a single IP
     * @param xAccountApiKey Account API Key (required)
     * @param ipid the IPId you want to enable monitoring for (required)
     * @return ModelsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelsResponse accountIntegrationRouterEnableGlockappsIPMonitoring(String xAccountApiKey, Long ipid) throws ApiException {
        ApiResponse<ModelsResponse> resp = accountIntegrationRouterEnableGlockappsIPMonitoringWithHttpInfo(xAccountApiKey, ipid);
        return resp.getData();
    }

    /**
     * 
     * Enable IP Monitoring for a single IP
     * @param xAccountApiKey Account API Key (required)
     * @param ipid the IPId you want to enable monitoring for (required)
     * @return ApiResponse&lt;ModelsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelsResponse> accountIntegrationRouterEnableGlockappsIPMonitoringWithHttpInfo(String xAccountApiKey, Long ipid) throws ApiException {
        com.squareup.okhttp.Call call = accountIntegrationRouterEnableGlockappsIPMonitoringValidateBeforeCall(xAccountApiKey, ipid, null, null);
        Type localVarReturnType = new TypeToken<ModelsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Enable IP Monitoring for a single IP
     * @param xAccountApiKey Account API Key (required)
     * @param ipid the IPId you want to enable monitoring for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accountIntegrationRouterEnableGlockappsIPMonitoringAsync(String xAccountApiKey, Long ipid, final ApiCallback<ModelsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accountIntegrationRouterEnableGlockappsIPMonitoringValidateBeforeCall(xAccountApiKey, ipid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for accountIntegrationRouterGetAll
     * @param xAccountApiKey Account API Key (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accountIntegrationRouterGetAllCall(String xAccountApiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/integration/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccountApiKey != null)
        localVarHeaderParams.put("X-Account-ApiKey", apiClient.parameterToString(xAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accountIntegrationRouterGetAllValidateBeforeCall(String xAccountApiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xAccountApiKey' is set
        if (xAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xAccountApiKey' when calling accountIntegrationRouterGetAll(Async)");
        }
        

        com.squareup.okhttp.Call call = accountIntegrationRouterGetAllCall(xAccountApiKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get All Integrations
     * @param xAccountApiKey Account API Key (required)
     * @return List&lt;ModelsIntegration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ModelsIntegration> accountIntegrationRouterGetAll(String xAccountApiKey) throws ApiException {
        ApiResponse<List<ModelsIntegration>> resp = accountIntegrationRouterGetAllWithHttpInfo(xAccountApiKey);
        return resp.getData();
    }

    /**
     * 
     * Get All Integrations
     * @param xAccountApiKey Account API Key (required)
     * @return ApiResponse&lt;List&lt;ModelsIntegration&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ModelsIntegration>> accountIntegrationRouterGetAllWithHttpInfo(String xAccountApiKey) throws ApiException {
        com.squareup.okhttp.Call call = accountIntegrationRouterGetAllValidateBeforeCall(xAccountApiKey, null, null);
        Type localVarReturnType = new TypeToken<List<ModelsIntegration>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get All Integrations
     * @param xAccountApiKey Account API Key (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accountIntegrationRouterGetAllAsync(String xAccountApiKey, final ApiCallback<List<ModelsIntegration>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accountIntegrationRouterGetAllValidateBeforeCall(xAccountApiKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ModelsIntegration>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for accountIntegrationRouterGetMonitoredIPStats
     * @param xAccountApiKey Account API Key (required)
     * @param ipid the IPId for which you want monitored stats (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accountIntegrationRouterGetMonitoredIPStatsCall(String xAccountApiKey, Long ipid, String from, String to, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/integration/glockapps/monitor/stat/{ipid}"
            .replaceAll("\\{" + "ipid" + "\\}", apiClient.escapeString(ipid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to", to));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccountApiKey != null)
        localVarHeaderParams.put("X-Account-ApiKey", apiClient.parameterToString(xAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accountIntegrationRouterGetMonitoredIPStatsValidateBeforeCall(String xAccountApiKey, Long ipid, String from, String to, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xAccountApiKey' is set
        if (xAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xAccountApiKey' when calling accountIntegrationRouterGetMonitoredIPStats(Async)");
        }
        
        // verify the required parameter 'ipid' is set
        if (ipid == null) {
            throw new ApiException("Missing the required parameter 'ipid' when calling accountIntegrationRouterGetMonitoredIPStats(Async)");
        }
        

        com.squareup.okhttp.Call call = accountIntegrationRouterGetMonitoredIPStatsCall(xAccountApiKey, ipid, from, to, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get Monitored IP Stats
     * @param xAccountApiKey Account API Key (required)
     * @param ipid the IPId for which you want monitored stats (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @return List&lt;ModelsRGlockappsMonitorStat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ModelsRGlockappsMonitorStat> accountIntegrationRouterGetMonitoredIPStats(String xAccountApiKey, Long ipid, String from, String to) throws ApiException {
        ApiResponse<List<ModelsRGlockappsMonitorStat>> resp = accountIntegrationRouterGetMonitoredIPStatsWithHttpInfo(xAccountApiKey, ipid, from, to);
        return resp.getData();
    }

    /**
     * 
     * Get Monitored IP Stats
     * @param xAccountApiKey Account API Key (required)
     * @param ipid the IPId for which you want monitored stats (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @return ApiResponse&lt;List&lt;ModelsRGlockappsMonitorStat&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ModelsRGlockappsMonitorStat>> accountIntegrationRouterGetMonitoredIPStatsWithHttpInfo(String xAccountApiKey, Long ipid, String from, String to) throws ApiException {
        com.squareup.okhttp.Call call = accountIntegrationRouterGetMonitoredIPStatsValidateBeforeCall(xAccountApiKey, ipid, from, to, null, null);
        Type localVarReturnType = new TypeToken<List<ModelsRGlockappsMonitorStat>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Monitored IP Stats
     * @param xAccountApiKey Account API Key (required)
     * @param ipid the IPId for which you want monitored stats (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accountIntegrationRouterGetMonitoredIPStatsAsync(String xAccountApiKey, Long ipid, String from, String to, final ApiCallback<List<ModelsRGlockappsMonitorStat>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accountIntegrationRouterGetMonitoredIPStatsValidateBeforeCall(xAccountApiKey, ipid, from, to, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ModelsRGlockappsMonitorStat>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for accountIntegrationRouterUpdate
     * @param xAccountApiKey Account API Key (required)
     * @param itype The integration type you want to update (required)
     * @param body The Integration content (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accountIntegrationRouterUpdateCall(String xAccountApiKey, String itype, ModelsEIntegration body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/account/integration/{itype}"
            .replaceAll("\\{" + "itype" + "\\}", apiClient.escapeString(itype.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccountApiKey != null)
        localVarHeaderParams.put("X-Account-ApiKey", apiClient.parameterToString(xAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accountIntegrationRouterUpdateValidateBeforeCall(String xAccountApiKey, String itype, ModelsEIntegration body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xAccountApiKey' is set
        if (xAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xAccountApiKey' when calling accountIntegrationRouterUpdate(Async)");
        }
        
        // verify the required parameter 'itype' is set
        if (itype == null) {
            throw new ApiException("Missing the required parameter 'itype' when calling accountIntegrationRouterUpdate(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling accountIntegrationRouterUpdate(Async)");
        }
        

        com.squareup.okhttp.Call call = accountIntegrationRouterUpdateCall(xAccountApiKey, itype, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Update Integration
     * @param xAccountApiKey Account API Key (required)
     * @param itype The integration type you want to update (required)
     * @param body The Integration content (required)
     * @return ModelsIntegration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelsIntegration accountIntegrationRouterUpdate(String xAccountApiKey, String itype, ModelsEIntegration body) throws ApiException {
        ApiResponse<ModelsIntegration> resp = accountIntegrationRouterUpdateWithHttpInfo(xAccountApiKey, itype, body);
        return resp.getData();
    }

    /**
     * 
     * Update Integration
     * @param xAccountApiKey Account API Key (required)
     * @param itype The integration type you want to update (required)
     * @param body The Integration content (required)
     * @return ApiResponse&lt;ModelsIntegration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelsIntegration> accountIntegrationRouterUpdateWithHttpInfo(String xAccountApiKey, String itype, ModelsEIntegration body) throws ApiException {
        com.squareup.okhttp.Call call = accountIntegrationRouterUpdateValidateBeforeCall(xAccountApiKey, itype, body, null, null);
        Type localVarReturnType = new TypeToken<ModelsIntegration>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update Integration
     * @param xAccountApiKey Account API Key (required)
     * @param itype The integration type you want to update (required)
     * @param body The Integration content (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accountIntegrationRouterUpdateAsync(String xAccountApiKey, String itype, ModelsEIntegration body, final ApiCallback<ModelsIntegration> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accountIntegrationRouterUpdateValidateBeforeCall(xAccountApiKey, itype, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelsIntegration>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
