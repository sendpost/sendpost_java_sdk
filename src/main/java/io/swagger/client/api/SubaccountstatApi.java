/*
 * SendPost API
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ModelsAGStat;
import io.swagger.client.model.ModelsAIPStat;
import io.swagger.client.model.ModelsPIPStat;
import io.swagger.client.model.ModelsRStat;
import io.swagger.client.model.ModelsStat;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SubaccountstatApi {
    private ApiClient apiClient;

    public SubaccountstatApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SubaccountstatApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for subAccountStatRouterGetAllAggregateSubAccountStats
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call subAccountStatRouterGetAllAggregateSubAccountStatsCall(String xSubAccountApiKey, String from, String to, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subaccount/stat/aggregate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to", to));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xSubAccountApiKey != null)
        localVarHeaderParams.put("X-SubAccount-ApiKey", apiClient.parameterToString(xSubAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call subAccountStatRouterGetAllAggregateSubAccountStatsValidateBeforeCall(String xSubAccountApiKey, String from, String to, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xSubAccountApiKey' is set
        if (xSubAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xSubAccountApiKey' when calling subAccountStatRouterGetAllAggregateSubAccountStats(Async)");
        }
        

        com.squareup.okhttp.Call call = subAccountStatRouterGetAllAggregateSubAccountStatsCall(xSubAccountApiKey, from, to, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get All Aggregate Sub-Account Stats
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @return ModelsStat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelsStat subAccountStatRouterGetAllAggregateSubAccountStats(String xSubAccountApiKey, String from, String to) throws ApiException {
        ApiResponse<ModelsStat> resp = subAccountStatRouterGetAllAggregateSubAccountStatsWithHttpInfo(xSubAccountApiKey, from, to);
        return resp.getData();
    }

    /**
     * 
     * Get All Aggregate Sub-Account Stats
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @return ApiResponse&lt;ModelsStat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelsStat> subAccountStatRouterGetAllAggregateSubAccountStatsWithHttpInfo(String xSubAccountApiKey, String from, String to) throws ApiException {
        com.squareup.okhttp.Call call = subAccountStatRouterGetAllAggregateSubAccountStatsValidateBeforeCall(xSubAccountApiKey, from, to, null, null);
        Type localVarReturnType = new TypeToken<ModelsStat>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get All Aggregate Sub-Account Stats
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call subAccountStatRouterGetAllAggregateSubAccountStatsAsync(String xSubAccountApiKey, String from, String to, final ApiCallback<ModelsStat> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = subAccountStatRouterGetAllAggregateSubAccountStatsValidateBeforeCall(xSubAccountApiKey, from, to, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelsStat>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for subAccountStatRouterGetAllAggregateSubAccountStatsByGroup
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param group the group whose stats you want (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call subAccountStatRouterGetAllAggregateSubAccountStatsByGroupCall(String xSubAccountApiKey, String group, String from, String to, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subaccount/stat/aggregate/group";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to", to));
        if (group != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("group", group));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xSubAccountApiKey != null)
        localVarHeaderParams.put("X-SubAccount-ApiKey", apiClient.parameterToString(xSubAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call subAccountStatRouterGetAllAggregateSubAccountStatsByGroupValidateBeforeCall(String xSubAccountApiKey, String group, String from, String to, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xSubAccountApiKey' is set
        if (xSubAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xSubAccountApiKey' when calling subAccountStatRouterGetAllAggregateSubAccountStatsByGroup(Async)");
        }
        
        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling subAccountStatRouterGetAllAggregateSubAccountStatsByGroup(Async)");
        }
        

        com.squareup.okhttp.Call call = subAccountStatRouterGetAllAggregateSubAccountStatsByGroupCall(xSubAccountApiKey, group, from, to, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get All Aggregate Sub-Account Stats by Group
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param group the group whose stats you want (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @return ModelsStat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelsStat subAccountStatRouterGetAllAggregateSubAccountStatsByGroup(String xSubAccountApiKey, String group, String from, String to) throws ApiException {
        ApiResponse<ModelsStat> resp = subAccountStatRouterGetAllAggregateSubAccountStatsByGroupWithHttpInfo(xSubAccountApiKey, group, from, to);
        return resp.getData();
    }

    /**
     * 
     * Get All Aggregate Sub-Account Stats by Group
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param group the group whose stats you want (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @return ApiResponse&lt;ModelsStat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelsStat> subAccountStatRouterGetAllAggregateSubAccountStatsByGroupWithHttpInfo(String xSubAccountApiKey, String group, String from, String to) throws ApiException {
        com.squareup.okhttp.Call call = subAccountStatRouterGetAllAggregateSubAccountStatsByGroupValidateBeforeCall(xSubAccountApiKey, group, from, to, null, null);
        Type localVarReturnType = new TypeToken<ModelsStat>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get All Aggregate Sub-Account Stats by Group
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param group the group whose stats you want (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call subAccountStatRouterGetAllAggregateSubAccountStatsByGroupAsync(String xSubAccountApiKey, String group, String from, String to, final ApiCallback<ModelsStat> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = subAccountStatRouterGetAllAggregateSubAccountStatsByGroupValidateBeforeCall(xSubAccountApiKey, group, from, to, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelsStat>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for subAccountStatRouterGetAllAggregatedGroupStatsForASubAccount
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call subAccountStatRouterGetAllAggregatedGroupStatsForASubAccountCall(String xSubAccountApiKey, String from, String to, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subaccount/stat/aggregate/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to", to));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xSubAccountApiKey != null)
        localVarHeaderParams.put("X-SubAccount-ApiKey", apiClient.parameterToString(xSubAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call subAccountStatRouterGetAllAggregatedGroupStatsForASubAccountValidateBeforeCall(String xSubAccountApiKey, String from, String to, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xSubAccountApiKey' is set
        if (xSubAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xSubAccountApiKey' when calling subAccountStatRouterGetAllAggregatedGroupStatsForASubAccount(Async)");
        }
        

        com.squareup.okhttp.Call call = subAccountStatRouterGetAllAggregatedGroupStatsForASubAccountCall(xSubAccountApiKey, from, to, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get All Aggregated Group Stats for a Sub-Account
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @return List&lt;ModelsAGStat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ModelsAGStat> subAccountStatRouterGetAllAggregatedGroupStatsForASubAccount(String xSubAccountApiKey, String from, String to) throws ApiException {
        ApiResponse<List<ModelsAGStat>> resp = subAccountStatRouterGetAllAggregatedGroupStatsForASubAccountWithHttpInfo(xSubAccountApiKey, from, to);
        return resp.getData();
    }

    /**
     * 
     * Get All Aggregated Group Stats for a Sub-Account
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @return ApiResponse&lt;List&lt;ModelsAGStat&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ModelsAGStat>> subAccountStatRouterGetAllAggregatedGroupStatsForASubAccountWithHttpInfo(String xSubAccountApiKey, String from, String to) throws ApiException {
        com.squareup.okhttp.Call call = subAccountStatRouterGetAllAggregatedGroupStatsForASubAccountValidateBeforeCall(xSubAccountApiKey, from, to, null, null);
        Type localVarReturnType = new TypeToken<List<ModelsAGStat>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get All Aggregated Group Stats for a Sub-Account
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call subAccountStatRouterGetAllAggregatedGroupStatsForASubAccountAsync(String xSubAccountApiKey, String from, String to, final ApiCallback<List<ModelsAGStat>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = subAccountStatRouterGetAllAggregatedGroupStatsForASubAccountValidateBeforeCall(xSubAccountApiKey, from, to, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ModelsAGStat>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for subAccountStatRouterGetAllAggregatedIPStatsForASubAccount
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call subAccountStatRouterGetAllAggregatedIPStatsForASubAccountCall(String xSubAccountApiKey, String from, String to, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subaccount/stat/aggregate/ips";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to", to));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xSubAccountApiKey != null)
        localVarHeaderParams.put("X-SubAccount-ApiKey", apiClient.parameterToString(xSubAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call subAccountStatRouterGetAllAggregatedIPStatsForASubAccountValidateBeforeCall(String xSubAccountApiKey, String from, String to, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xSubAccountApiKey' is set
        if (xSubAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xSubAccountApiKey' when calling subAccountStatRouterGetAllAggregatedIPStatsForASubAccount(Async)");
        }
        

        com.squareup.okhttp.Call call = subAccountStatRouterGetAllAggregatedIPStatsForASubAccountCall(xSubAccountApiKey, from, to, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get All Aggregated IP Stats for a Sub-Account
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @return List&lt;ModelsAIPStat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ModelsAIPStat> subAccountStatRouterGetAllAggregatedIPStatsForASubAccount(String xSubAccountApiKey, String from, String to) throws ApiException {
        ApiResponse<List<ModelsAIPStat>> resp = subAccountStatRouterGetAllAggregatedIPStatsForASubAccountWithHttpInfo(xSubAccountApiKey, from, to);
        return resp.getData();
    }

    /**
     * 
     * Get All Aggregated IP Stats for a Sub-Account
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @return ApiResponse&lt;List&lt;ModelsAIPStat&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ModelsAIPStat>> subAccountStatRouterGetAllAggregatedIPStatsForASubAccountWithHttpInfo(String xSubAccountApiKey, String from, String to) throws ApiException {
        com.squareup.okhttp.Call call = subAccountStatRouterGetAllAggregatedIPStatsForASubAccountValidateBeforeCall(xSubAccountApiKey, from, to, null, null);
        Type localVarReturnType = new TypeToken<List<ModelsAIPStat>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get All Aggregated IP Stats for a Sub-Account
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call subAccountStatRouterGetAllAggregatedIPStatsForASubAccountAsync(String xSubAccountApiKey, String from, String to, final ApiCallback<List<ModelsAIPStat>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = subAccountStatRouterGetAllAggregatedIPStatsForASubAccountValidateBeforeCall(xSubAccountApiKey, from, to, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ModelsAIPStat>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for subAccountStatRouterGetAllAggregatedProviderStatsForASpecificIPOfASubAccount
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param ipid the IPId you want to get (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call subAccountStatRouterGetAllAggregatedProviderStatsForASpecificIPOfASubAccountCall(String xSubAccountApiKey, Long ipid, String from, String to, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subaccount/stat/aggregate/ip/{ipid}/providers"
            .replaceAll("\\{" + "ipid" + "\\}", apiClient.escapeString(ipid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to", to));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xSubAccountApiKey != null)
        localVarHeaderParams.put("X-SubAccount-ApiKey", apiClient.parameterToString(xSubAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call subAccountStatRouterGetAllAggregatedProviderStatsForASpecificIPOfASubAccountValidateBeforeCall(String xSubAccountApiKey, Long ipid, String from, String to, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xSubAccountApiKey' is set
        if (xSubAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xSubAccountApiKey' when calling subAccountStatRouterGetAllAggregatedProviderStatsForASpecificIPOfASubAccount(Async)");
        }
        
        // verify the required parameter 'ipid' is set
        if (ipid == null) {
            throw new ApiException("Missing the required parameter 'ipid' when calling subAccountStatRouterGetAllAggregatedProviderStatsForASpecificIPOfASubAccount(Async)");
        }
        

        com.squareup.okhttp.Call call = subAccountStatRouterGetAllAggregatedProviderStatsForASpecificIPOfASubAccountCall(xSubAccountApiKey, ipid, from, to, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get All Aggregated Provider Stats for a Specific IP of a Sub-Account
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param ipid the IPId you want to get (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @return List&lt;ModelsPIPStat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ModelsPIPStat> subAccountStatRouterGetAllAggregatedProviderStatsForASpecificIPOfASubAccount(String xSubAccountApiKey, Long ipid, String from, String to) throws ApiException {
        ApiResponse<List<ModelsPIPStat>> resp = subAccountStatRouterGetAllAggregatedProviderStatsForASpecificIPOfASubAccountWithHttpInfo(xSubAccountApiKey, ipid, from, to);
        return resp.getData();
    }

    /**
     * 
     * Get All Aggregated Provider Stats for a Specific IP of a Sub-Account
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param ipid the IPId you want to get (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @return ApiResponse&lt;List&lt;ModelsPIPStat&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ModelsPIPStat>> subAccountStatRouterGetAllAggregatedProviderStatsForASpecificIPOfASubAccountWithHttpInfo(String xSubAccountApiKey, Long ipid, String from, String to) throws ApiException {
        com.squareup.okhttp.Call call = subAccountStatRouterGetAllAggregatedProviderStatsForASpecificIPOfASubAccountValidateBeforeCall(xSubAccountApiKey, ipid, from, to, null, null);
        Type localVarReturnType = new TypeToken<List<ModelsPIPStat>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get All Aggregated Provider Stats for a Specific IP of a Sub-Account
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param ipid the IPId you want to get (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call subAccountStatRouterGetAllAggregatedProviderStatsForASpecificIPOfASubAccountAsync(String xSubAccountApiKey, Long ipid, String from, String to, final ApiCallback<List<ModelsPIPStat>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = subAccountStatRouterGetAllAggregatedProviderStatsForASpecificIPOfASubAccountValidateBeforeCall(xSubAccountApiKey, ipid, from, to, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ModelsPIPStat>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for subAccountStatRouterGetAllAggregatedProviderStatsForASubAccount
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call subAccountStatRouterGetAllAggregatedProviderStatsForASubAccountCall(String xSubAccountApiKey, String from, String to, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subaccount/stat/aggregate/providers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to", to));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xSubAccountApiKey != null)
        localVarHeaderParams.put("X-SubAccount-ApiKey", apiClient.parameterToString(xSubAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call subAccountStatRouterGetAllAggregatedProviderStatsForASubAccountValidateBeforeCall(String xSubAccountApiKey, String from, String to, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xSubAccountApiKey' is set
        if (xSubAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xSubAccountApiKey' when calling subAccountStatRouterGetAllAggregatedProviderStatsForASubAccount(Async)");
        }
        

        com.squareup.okhttp.Call call = subAccountStatRouterGetAllAggregatedProviderStatsForASubAccountCall(xSubAccountApiKey, from, to, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get All Aggregated Provider Stats for a Sub-Account
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @return List&lt;ModelsPIPStat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ModelsPIPStat> subAccountStatRouterGetAllAggregatedProviderStatsForASubAccount(String xSubAccountApiKey, String from, String to) throws ApiException {
        ApiResponse<List<ModelsPIPStat>> resp = subAccountStatRouterGetAllAggregatedProviderStatsForASubAccountWithHttpInfo(xSubAccountApiKey, from, to);
        return resp.getData();
    }

    /**
     * 
     * Get All Aggregated Provider Stats for a Sub-Account
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @return ApiResponse&lt;List&lt;ModelsPIPStat&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ModelsPIPStat>> subAccountStatRouterGetAllAggregatedProviderStatsForASubAccountWithHttpInfo(String xSubAccountApiKey, String from, String to) throws ApiException {
        com.squareup.okhttp.Call call = subAccountStatRouterGetAllAggregatedProviderStatsForASubAccountValidateBeforeCall(xSubAccountApiKey, from, to, null, null);
        Type localVarReturnType = new TypeToken<List<ModelsPIPStat>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get All Aggregated Provider Stats for a Sub-Account
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call subAccountStatRouterGetAllAggregatedProviderStatsForASubAccountAsync(String xSubAccountApiKey, String from, String to, final ApiCallback<List<ModelsPIPStat>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = subAccountStatRouterGetAllAggregatedProviderStatsForASubAccountValidateBeforeCall(xSubAccountApiKey, from, to, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ModelsPIPStat>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for subAccountStatRouterGetAllSubAccountStats
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call subAccountStatRouterGetAllSubAccountStatsCall(String xSubAccountApiKey, String from, String to, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subaccount/stat/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to", to));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xSubAccountApiKey != null)
        localVarHeaderParams.put("X-SubAccount-ApiKey", apiClient.parameterToString(xSubAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call subAccountStatRouterGetAllSubAccountStatsValidateBeforeCall(String xSubAccountApiKey, String from, String to, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xSubAccountApiKey' is set
        if (xSubAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xSubAccountApiKey' when calling subAccountStatRouterGetAllSubAccountStats(Async)");
        }
        

        com.squareup.okhttp.Call call = subAccountStatRouterGetAllSubAccountStatsCall(xSubAccountApiKey, from, to, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get All Sub-Account Stats
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @return List&lt;ModelsRStat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ModelsRStat> subAccountStatRouterGetAllSubAccountStats(String xSubAccountApiKey, String from, String to) throws ApiException {
        ApiResponse<List<ModelsRStat>> resp = subAccountStatRouterGetAllSubAccountStatsWithHttpInfo(xSubAccountApiKey, from, to);
        return resp.getData();
    }

    /**
     * 
     * Get All Sub-Account Stats
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @return ApiResponse&lt;List&lt;ModelsRStat&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ModelsRStat>> subAccountStatRouterGetAllSubAccountStatsWithHttpInfo(String xSubAccountApiKey, String from, String to) throws ApiException {
        com.squareup.okhttp.Call call = subAccountStatRouterGetAllSubAccountStatsValidateBeforeCall(xSubAccountApiKey, from, to, null, null);
        Type localVarReturnType = new TypeToken<List<ModelsRStat>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get All Sub-Account Stats
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call subAccountStatRouterGetAllSubAccountStatsAsync(String xSubAccountApiKey, String from, String to, final ApiCallback<List<ModelsRStat>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = subAccountStatRouterGetAllSubAccountStatsValidateBeforeCall(xSubAccountApiKey, from, to, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ModelsRStat>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for subAccountStatRouterGetAllSubAccountStatsByGroup
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param group the tag whose stats you want (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call subAccountStatRouterGetAllSubAccountStatsByGroupCall(String xSubAccountApiKey, String group, String from, String to, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subaccount/stat/group";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to", to));
        if (group != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("group", group));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xSubAccountApiKey != null)
        localVarHeaderParams.put("X-SubAccount-ApiKey", apiClient.parameterToString(xSubAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call subAccountStatRouterGetAllSubAccountStatsByGroupValidateBeforeCall(String xSubAccountApiKey, String group, String from, String to, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xSubAccountApiKey' is set
        if (xSubAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xSubAccountApiKey' when calling subAccountStatRouterGetAllSubAccountStatsByGroup(Async)");
        }
        
        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling subAccountStatRouterGetAllSubAccountStatsByGroup(Async)");
        }
        

        com.squareup.okhttp.Call call = subAccountStatRouterGetAllSubAccountStatsByGroupCall(xSubAccountApiKey, group, from, to, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get All Sub-Account Stats by Group
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param group the tag whose stats you want (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @return List&lt;ModelsRStat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ModelsRStat> subAccountStatRouterGetAllSubAccountStatsByGroup(String xSubAccountApiKey, String group, String from, String to) throws ApiException {
        ApiResponse<List<ModelsRStat>> resp = subAccountStatRouterGetAllSubAccountStatsByGroupWithHttpInfo(xSubAccountApiKey, group, from, to);
        return resp.getData();
    }

    /**
     * 
     * Get All Sub-Account Stats by Group
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param group the tag whose stats you want (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @return ApiResponse&lt;List&lt;ModelsRStat&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ModelsRStat>> subAccountStatRouterGetAllSubAccountStatsByGroupWithHttpInfo(String xSubAccountApiKey, String group, String from, String to) throws ApiException {
        com.squareup.okhttp.Call call = subAccountStatRouterGetAllSubAccountStatsByGroupValidateBeforeCall(xSubAccountApiKey, group, from, to, null, null);
        Type localVarReturnType = new TypeToken<List<ModelsRStat>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get All Sub-Account Stats by Group
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param group the tag whose stats you want (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call subAccountStatRouterGetAllSubAccountStatsByGroupAsync(String xSubAccountApiKey, String group, String from, String to, final ApiCallback<List<ModelsRStat>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = subAccountStatRouterGetAllSubAccountStatsByGroupValidateBeforeCall(xSubAccountApiKey, group, from, to, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ModelsRStat>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
