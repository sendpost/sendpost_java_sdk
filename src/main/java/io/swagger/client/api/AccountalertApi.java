/*
 * SendPost API
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Alert;
import io.swagger.client.model.ModelsAlert;
import io.swagger.client.model.ModelsAlertRequest;
import io.swagger.client.model.ModelsCountStat;
import io.swagger.client.model.ModelsDetailedAlert;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountalertApi {
    private ApiClient apiClient;

    public AccountalertApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountalertApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for alertRouterCount
     * @param xAccountApiKey Account API Key (required)
     * @param search search term (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call alertRouterCountCall(String xAccountApiKey, String search, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/alert/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (search != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search", search));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccountApiKey != null)
        localVarHeaderParams.put("X-Account-ApiKey", apiClient.parameterToString(xAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call alertRouterCountValidateBeforeCall(String xAccountApiKey, String search, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xAccountApiKey' is set
        if (xAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xAccountApiKey' when calling alertRouterCount(Async)");
        }
        

        com.squareup.okhttp.Call call = alertRouterCountCall(xAccountApiKey, search, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Count Total Alerts for account
     * @param xAccountApiKey Account API Key (required)
     * @param search search term (optional)
     * @return ModelsCountStat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelsCountStat alertRouterCount(String xAccountApiKey, String search) throws ApiException {
        ApiResponse<ModelsCountStat> resp = alertRouterCountWithHttpInfo(xAccountApiKey, search);
        return resp.getData();
    }

    /**
     * 
     * Count Total Alerts for account
     * @param xAccountApiKey Account API Key (required)
     * @param search search term (optional)
     * @return ApiResponse&lt;ModelsCountStat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelsCountStat> alertRouterCountWithHttpInfo(String xAccountApiKey, String search) throws ApiException {
        com.squareup.okhttp.Call call = alertRouterCountValidateBeforeCall(xAccountApiKey, search, null, null);
        Type localVarReturnType = new TypeToken<ModelsCountStat>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Count Total Alerts for account
     * @param xAccountApiKey Account API Key (required)
     * @param search search term (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call alertRouterCountAsync(String xAccountApiKey, String search, final ApiCallback<ModelsCountStat> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = alertRouterCountValidateBeforeCall(xAccountApiKey, search, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelsCountStat>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for alertRouterCreateAlert
     * @param xAccountApiKey Account API Key (required)
     * @param body The List to br sent (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call alertRouterCreateAlertCall(String xAccountApiKey, ModelsAlertRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/account/alert/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccountApiKey != null)
        localVarHeaderParams.put("X-Account-ApiKey", apiClient.parameterToString(xAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call alertRouterCreateAlertValidateBeforeCall(String xAccountApiKey, ModelsAlertRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xAccountApiKey' is set
        if (xAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xAccountApiKey' when calling alertRouterCreateAlert(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling alertRouterCreateAlert(Async)");
        }
        

        com.squareup.okhttp.Call call = alertRouterCreateAlertCall(xAccountApiKey, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * create an alert
     * @param xAccountApiKey Account API Key (required)
     * @param body The List to br sent (required)
     * @return ModelsAlert
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelsAlert alertRouterCreateAlert(String xAccountApiKey, ModelsAlertRequest body) throws ApiException {
        ApiResponse<ModelsAlert> resp = alertRouterCreateAlertWithHttpInfo(xAccountApiKey, body);
        return resp.getData();
    }

    /**
     * 
     * create an alert
     * @param xAccountApiKey Account API Key (required)
     * @param body The List to br sent (required)
     * @return ApiResponse&lt;ModelsAlert&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelsAlert> alertRouterCreateAlertWithHttpInfo(String xAccountApiKey, ModelsAlertRequest body) throws ApiException {
        com.squareup.okhttp.Call call = alertRouterCreateAlertValidateBeforeCall(xAccountApiKey, body, null, null);
        Type localVarReturnType = new TypeToken<ModelsAlert>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * create an alert
     * @param xAccountApiKey Account API Key (required)
     * @param body The List to br sent (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call alertRouterCreateAlertAsync(String xAccountApiKey, ModelsAlertRequest body, final ApiCallback<ModelsAlert> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = alertRouterCreateAlertValidateBeforeCall(xAccountApiKey, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelsAlert>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for alertRouterGetAll
     * @param xAccountApiKey Account API Key (required)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @param search search term (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call alertRouterGetAllCall(String xAccountApiKey, Long offset, Long limit, String search, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/alert/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (search != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search", search));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccountApiKey != null)
        localVarHeaderParams.put("X-Account-ApiKey", apiClient.parameterToString(xAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call alertRouterGetAllValidateBeforeCall(String xAccountApiKey, Long offset, Long limit, String search, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xAccountApiKey' is set
        if (xAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xAccountApiKey' when calling alertRouterGetAll(Async)");
        }
        

        com.squareup.okhttp.Call call = alertRouterGetAllCall(xAccountApiKey, offset, limit, search, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get All Alerts
     * @param xAccountApiKey Account API Key (required)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @param search search term (optional)
     * @return List&lt;ModelsDetailedAlert&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ModelsDetailedAlert> alertRouterGetAll(String xAccountApiKey, Long offset, Long limit, String search) throws ApiException {
        ApiResponse<List<ModelsDetailedAlert>> resp = alertRouterGetAllWithHttpInfo(xAccountApiKey, offset, limit, search);
        return resp.getData();
    }

    /**
     * 
     * Get All Alerts
     * @param xAccountApiKey Account API Key (required)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @param search search term (optional)
     * @return ApiResponse&lt;List&lt;ModelsDetailedAlert&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ModelsDetailedAlert>> alertRouterGetAllWithHttpInfo(String xAccountApiKey, Long offset, Long limit, String search) throws ApiException {
        com.squareup.okhttp.Call call = alertRouterGetAllValidateBeforeCall(xAccountApiKey, offset, limit, search, null, null);
        Type localVarReturnType = new TypeToken<List<ModelsDetailedAlert>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get All Alerts
     * @param xAccountApiKey Account API Key (required)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @param search search term (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call alertRouterGetAllAsync(String xAccountApiKey, Long offset, Long limit, String search, final ApiCallback<List<ModelsDetailedAlert>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = alertRouterGetAllValidateBeforeCall(xAccountApiKey, offset, limit, search, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ModelsDetailedAlert>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for alertRouterUpdate
     * @param xAccountApiKey Account API Key (required)
     * @param alertid The alert you want to update (required)
     * @param body The alert  Settings (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call alertRouterUpdateCall(String xAccountApiKey, Long alertid, Alert body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/account/alert/{alertid}"
            .replaceAll("\\{" + "alertid" + "\\}", apiClient.escapeString(alertid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccountApiKey != null)
        localVarHeaderParams.put("X-Account-ApiKey", apiClient.parameterToString(xAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call alertRouterUpdateValidateBeforeCall(String xAccountApiKey, Long alertid, Alert body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xAccountApiKey' is set
        if (xAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xAccountApiKey' when calling alertRouterUpdate(Async)");
        }
        
        // verify the required parameter 'alertid' is set
        if (alertid == null) {
            throw new ApiException("Missing the required parameter 'alertid' when calling alertRouterUpdate(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling alertRouterUpdate(Async)");
        }
        

        com.squareup.okhttp.Call call = alertRouterUpdateCall(xAccountApiKey, alertid, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Update an Alert
     * @param xAccountApiKey Account API Key (required)
     * @param alertid The alert you want to update (required)
     * @param body The alert  Settings (required)
     * @return Alert
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Alert alertRouterUpdate(String xAccountApiKey, Long alertid, Alert body) throws ApiException {
        ApiResponse<Alert> resp = alertRouterUpdateWithHttpInfo(xAccountApiKey, alertid, body);
        return resp.getData();
    }

    /**
     * 
     * Update an Alert
     * @param xAccountApiKey Account API Key (required)
     * @param alertid The alert you want to update (required)
     * @param body The alert  Settings (required)
     * @return ApiResponse&lt;Alert&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Alert> alertRouterUpdateWithHttpInfo(String xAccountApiKey, Long alertid, Alert body) throws ApiException {
        com.squareup.okhttp.Call call = alertRouterUpdateValidateBeforeCall(xAccountApiKey, alertid, body, null, null);
        Type localVarReturnType = new TypeToken<Alert>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an Alert
     * @param xAccountApiKey Account API Key (required)
     * @param alertid The alert you want to update (required)
     * @param body The alert  Settings (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call alertRouterUpdateAsync(String xAccountApiKey, Long alertid, Alert body, final ApiCallback<Alert> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = alertRouterUpdateValidateBeforeCall(xAccountApiKey, alertid, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Alert>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
