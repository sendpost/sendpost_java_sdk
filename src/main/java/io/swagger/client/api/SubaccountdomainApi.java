/*
 * SendPost API
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ModelsCountStat;
import io.swagger.client.model.ModelsDeleteResponse;
import io.swagger.client.model.ModelsDomain;
import io.swagger.client.model.ModelsEDomain;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SubaccountdomainApi {
    private ApiClient apiClient;

    public SubaccountdomainApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SubaccountdomainApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for domainRouterCount
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call domainRouterCountCall(String xSubAccountApiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subaccount/domain/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xSubAccountApiKey != null)
        localVarHeaderParams.put("X-SubAccount-ApiKey", apiClient.parameterToString(xSubAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call domainRouterCountValidateBeforeCall(String xSubAccountApiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xSubAccountApiKey' is set
        if (xSubAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xSubAccountApiKey' when calling domainRouterCount(Async)");
        }
        

        com.squareup.okhttp.Call call = domainRouterCountCall(xSubAccountApiKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Count Total Domains
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @return ModelsCountStat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelsCountStat domainRouterCount(String xSubAccountApiKey) throws ApiException {
        ApiResponse<ModelsCountStat> resp = domainRouterCountWithHttpInfo(xSubAccountApiKey);
        return resp.getData();
    }

    /**
     * 
     * Count Total Domains
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @return ApiResponse&lt;ModelsCountStat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelsCountStat> domainRouterCountWithHttpInfo(String xSubAccountApiKey) throws ApiException {
        com.squareup.okhttp.Call call = domainRouterCountValidateBeforeCall(xSubAccountApiKey, null, null);
        Type localVarReturnType = new TypeToken<ModelsCountStat>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Count Total Domains
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call domainRouterCountAsync(String xSubAccountApiKey, final ApiCallback<ModelsCountStat> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = domainRouterCountValidateBeforeCall(xSubAccountApiKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelsCountStat>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for domainRouterCreate
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param body The Domain content (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call domainRouterCreateCall(String xSubAccountApiKey, ModelsEDomain body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/subaccount/domain/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xSubAccountApiKey != null)
        localVarHeaderParams.put("X-SubAccount-ApiKey", apiClient.parameterToString(xSubAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call domainRouterCreateValidateBeforeCall(String xSubAccountApiKey, ModelsEDomain body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xSubAccountApiKey' is set
        if (xSubAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xSubAccountApiKey' when calling domainRouterCreate(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling domainRouterCreate(Async)");
        }
        

        com.squareup.okhttp.Call call = domainRouterCreateCall(xSubAccountApiKey, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create Domain
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param body The Domain content (required)
     * @return ModelsDomain
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelsDomain domainRouterCreate(String xSubAccountApiKey, ModelsEDomain body) throws ApiException {
        ApiResponse<ModelsDomain> resp = domainRouterCreateWithHttpInfo(xSubAccountApiKey, body);
        return resp.getData();
    }

    /**
     * 
     * Create Domain
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param body The Domain content (required)
     * @return ApiResponse&lt;ModelsDomain&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelsDomain> domainRouterCreateWithHttpInfo(String xSubAccountApiKey, ModelsEDomain body) throws ApiException {
        com.squareup.okhttp.Call call = domainRouterCreateValidateBeforeCall(xSubAccountApiKey, body, null, null);
        Type localVarReturnType = new TypeToken<ModelsDomain>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create Domain
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param body The Domain content (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call domainRouterCreateAsync(String xSubAccountApiKey, ModelsEDomain body, final ApiCallback<ModelsDomain> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = domainRouterCreateValidateBeforeCall(xSubAccountApiKey, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelsDomain>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for domainRouterDelete
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param domainId The DomainId you want to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call domainRouterDeleteCall(String xSubAccountApiKey, Long domainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subaccount/domain/{domainId}"
            .replaceAll("\\{" + "domainId" + "\\}", apiClient.escapeString(domainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xSubAccountApiKey != null)
        localVarHeaderParams.put("X-SubAccount-ApiKey", apiClient.parameterToString(xSubAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call domainRouterDeleteValidateBeforeCall(String xSubAccountApiKey, Long domainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xSubAccountApiKey' is set
        if (xSubAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xSubAccountApiKey' when calling domainRouterDelete(Async)");
        }
        
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling domainRouterDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = domainRouterDeleteCall(xSubAccountApiKey, domainId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete Domain
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param domainId The DomainId you want to delete (required)
     * @return ModelsDeleteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelsDeleteResponse domainRouterDelete(String xSubAccountApiKey, Long domainId) throws ApiException {
        ApiResponse<ModelsDeleteResponse> resp = domainRouterDeleteWithHttpInfo(xSubAccountApiKey, domainId);
        return resp.getData();
    }

    /**
     * 
     * Delete Domain
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param domainId The DomainId you want to delete (required)
     * @return ApiResponse&lt;ModelsDeleteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelsDeleteResponse> domainRouterDeleteWithHttpInfo(String xSubAccountApiKey, Long domainId) throws ApiException {
        com.squareup.okhttp.Call call = domainRouterDeleteValidateBeforeCall(xSubAccountApiKey, domainId, null, null);
        Type localVarReturnType = new TypeToken<ModelsDeleteResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete Domain
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param domainId The DomainId you want to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call domainRouterDeleteAsync(String xSubAccountApiKey, Long domainId, final ApiCallback<ModelsDeleteResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = domainRouterDeleteValidateBeforeCall(xSubAccountApiKey, domainId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelsDeleteResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for domainRouterGet
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param domainId the DomainId you want to get (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call domainRouterGetCall(String xSubAccountApiKey, Long domainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subaccount/domain/{domainId}"
            .replaceAll("\\{" + "domainId" + "\\}", apiClient.escapeString(domainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xSubAccountApiKey != null)
        localVarHeaderParams.put("X-SubAccount-ApiKey", apiClient.parameterToString(xSubAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call domainRouterGetValidateBeforeCall(String xSubAccountApiKey, Long domainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xSubAccountApiKey' is set
        if (xSubAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xSubAccountApiKey' when calling domainRouterGet(Async)");
        }
        
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling domainRouterGet(Async)");
        }
        

        com.squareup.okhttp.Call call = domainRouterGetCall(xSubAccountApiKey, domainId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Find Domain by DomainId
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param domainId the DomainId you want to get (required)
     * @return ModelsDomain
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelsDomain domainRouterGet(String xSubAccountApiKey, Long domainId) throws ApiException {
        ApiResponse<ModelsDomain> resp = domainRouterGetWithHttpInfo(xSubAccountApiKey, domainId);
        return resp.getData();
    }

    /**
     * 
     * Find Domain by DomainId
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param domainId the DomainId you want to get (required)
     * @return ApiResponse&lt;ModelsDomain&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelsDomain> domainRouterGetWithHttpInfo(String xSubAccountApiKey, Long domainId) throws ApiException {
        com.squareup.okhttp.Call call = domainRouterGetValidateBeforeCall(xSubAccountApiKey, domainId, null, null);
        Type localVarReturnType = new TypeToken<ModelsDomain>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Find Domain by DomainId
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param domainId the DomainId you want to get (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call domainRouterGetAsync(String xSubAccountApiKey, Long domainId, final ApiCallback<ModelsDomain> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = domainRouterGetValidateBeforeCall(xSubAccountApiKey, domainId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelsDomain>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for domainRouterGetAll
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @param search search term (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call domainRouterGetAllCall(String xSubAccountApiKey, Long offset, Long limit, String search, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subaccount/domain/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (search != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search", search));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xSubAccountApiKey != null)
        localVarHeaderParams.put("X-SubAccount-ApiKey", apiClient.parameterToString(xSubAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call domainRouterGetAllValidateBeforeCall(String xSubAccountApiKey, Long offset, Long limit, String search, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xSubAccountApiKey' is set
        if (xSubAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xSubAccountApiKey' when calling domainRouterGetAll(Async)");
        }
        

        com.squareup.okhttp.Call call = domainRouterGetAllCall(xSubAccountApiKey, offset, limit, search, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get All Domains
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @param search search term (optional)
     * @return List&lt;ModelsDomain&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ModelsDomain> domainRouterGetAll(String xSubAccountApiKey, Long offset, Long limit, String search) throws ApiException {
        ApiResponse<List<ModelsDomain>> resp = domainRouterGetAllWithHttpInfo(xSubAccountApiKey, offset, limit, search);
        return resp.getData();
    }

    /**
     * 
     * Get All Domains
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @param search search term (optional)
     * @return ApiResponse&lt;List&lt;ModelsDomain&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ModelsDomain>> domainRouterGetAllWithHttpInfo(String xSubAccountApiKey, Long offset, Long limit, String search) throws ApiException {
        com.squareup.okhttp.Call call = domainRouterGetAllValidateBeforeCall(xSubAccountApiKey, offset, limit, search, null, null);
        Type localVarReturnType = new TypeToken<List<ModelsDomain>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get All Domains
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @param search search term (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call domainRouterGetAllAsync(String xSubAccountApiKey, Long offset, Long limit, String search, final ApiCallback<List<ModelsDomain>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = domainRouterGetAllValidateBeforeCall(xSubAccountApiKey, offset, limit, search, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ModelsDomain>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for domainRouterUpdate
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param domainId The DomainId you want to update (required)
     * @param body The body (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call domainRouterUpdateCall(String xSubAccountApiKey, Long domainId, ModelsEDomain body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/subaccount/domain/{domainId}"
            .replaceAll("\\{" + "domainId" + "\\}", apiClient.escapeString(domainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xSubAccountApiKey != null)
        localVarHeaderParams.put("X-SubAccount-ApiKey", apiClient.parameterToString(xSubAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call domainRouterUpdateValidateBeforeCall(String xSubAccountApiKey, Long domainId, ModelsEDomain body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xSubAccountApiKey' is set
        if (xSubAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xSubAccountApiKey' when calling domainRouterUpdate(Async)");
        }
        
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling domainRouterUpdate(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling domainRouterUpdate(Async)");
        }
        

        com.squareup.okhttp.Call call = domainRouterUpdateCall(xSubAccountApiKey, domainId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Update Domain
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param domainId The DomainId you want to update (required)
     * @param body The body (required)
     * @return ModelsDomain
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelsDomain domainRouterUpdate(String xSubAccountApiKey, Long domainId, ModelsEDomain body) throws ApiException {
        ApiResponse<ModelsDomain> resp = domainRouterUpdateWithHttpInfo(xSubAccountApiKey, domainId, body);
        return resp.getData();
    }

    /**
     * 
     * Update Domain
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param domainId The DomainId you want to update (required)
     * @param body The body (required)
     * @return ApiResponse&lt;ModelsDomain&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelsDomain> domainRouterUpdateWithHttpInfo(String xSubAccountApiKey, Long domainId, ModelsEDomain body) throws ApiException {
        com.squareup.okhttp.Call call = domainRouterUpdateValidateBeforeCall(xSubAccountApiKey, domainId, body, null, null);
        Type localVarReturnType = new TypeToken<ModelsDomain>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update Domain
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param domainId The DomainId you want to update (required)
     * @param body The body (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call domainRouterUpdateAsync(String xSubAccountApiKey, Long domainId, ModelsEDomain body, final ApiCallback<ModelsDomain> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = domainRouterUpdateValidateBeforeCall(xSubAccountApiKey, domainId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelsDomain>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for domainRouterVerify
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param domainId the DomainId you want to get (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call domainRouterVerifyCall(String xSubAccountApiKey, Long domainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subaccount/domain/{domainId}/verify"
            .replaceAll("\\{" + "domainId" + "\\}", apiClient.escapeString(domainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xSubAccountApiKey != null)
        localVarHeaderParams.put("X-SubAccount-ApiKey", apiClient.parameterToString(xSubAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call domainRouterVerifyValidateBeforeCall(String xSubAccountApiKey, Long domainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xSubAccountApiKey' is set
        if (xSubAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xSubAccountApiKey' when calling domainRouterVerify(Async)");
        }
        
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling domainRouterVerify(Async)");
        }
        

        com.squareup.okhttp.Call call = domainRouterVerifyCall(xSubAccountApiKey, domainId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Verify Domain By Domain Id
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param domainId the DomainId you want to get (required)
     * @return ModelsDomain
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelsDomain domainRouterVerify(String xSubAccountApiKey, Long domainId) throws ApiException {
        ApiResponse<ModelsDomain> resp = domainRouterVerifyWithHttpInfo(xSubAccountApiKey, domainId);
        return resp.getData();
    }

    /**
     * 
     * Verify Domain By Domain Id
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param domainId the DomainId you want to get (required)
     * @return ApiResponse&lt;ModelsDomain&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelsDomain> domainRouterVerifyWithHttpInfo(String xSubAccountApiKey, Long domainId) throws ApiException {
        com.squareup.okhttp.Call call = domainRouterVerifyValidateBeforeCall(xSubAccountApiKey, domainId, null, null);
        Type localVarReturnType = new TypeToken<ModelsDomain>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Verify Domain By Domain Id
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param domainId the DomainId you want to get (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call domainRouterVerifyAsync(String xSubAccountApiKey, Long domainId, final ApiCallback<ModelsDomain> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = domainRouterVerifyValidateBeforeCall(xSubAccountApiKey, domainId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelsDomain>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
