/*
 * SendPost API
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ModelsPIPStat;
import io.swagger.client.model.ModelsRIPStat;
import io.swagger.client.model.ModelsSIPStat;
import io.swagger.client.model.ModelsStat;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountipstatApi {
    private ApiClient apiClient;

    public AccountipstatApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountipstatApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for iPStatRouterGetAllAggregateIPStats
     * @param xAccountApiKey Account API Key (required)
     * @param ipid the IPId you want to get (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call iPStatRouterGetAllAggregateIPStatsCall(String xAccountApiKey, Long ipid, String from, String to, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/ip/stat/{ipid}/aggregate"
            .replaceAll("\\{" + "ipid" + "\\}", apiClient.escapeString(ipid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to", to));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccountApiKey != null)
        localVarHeaderParams.put("X-Account-ApiKey", apiClient.parameterToString(xAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call iPStatRouterGetAllAggregateIPStatsValidateBeforeCall(String xAccountApiKey, Long ipid, String from, String to, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xAccountApiKey' is set
        if (xAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xAccountApiKey' when calling iPStatRouterGetAllAggregateIPStats(Async)");
        }
        
        // verify the required parameter 'ipid' is set
        if (ipid == null) {
            throw new ApiException("Missing the required parameter 'ipid' when calling iPStatRouterGetAllAggregateIPStats(Async)");
        }
        

        com.squareup.okhttp.Call call = iPStatRouterGetAllAggregateIPStatsCall(xAccountApiKey, ipid, from, to, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get All Aggregate Stats
     * @param xAccountApiKey Account API Key (required)
     * @param ipid the IPId you want to get (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @return ModelsStat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelsStat iPStatRouterGetAllAggregateIPStats(String xAccountApiKey, Long ipid, String from, String to) throws ApiException {
        ApiResponse<ModelsStat> resp = iPStatRouterGetAllAggregateIPStatsWithHttpInfo(xAccountApiKey, ipid, from, to);
        return resp.getData();
    }

    /**
     * 
     * Get All Aggregate Stats
     * @param xAccountApiKey Account API Key (required)
     * @param ipid the IPId you want to get (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @return ApiResponse&lt;ModelsStat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelsStat> iPStatRouterGetAllAggregateIPStatsWithHttpInfo(String xAccountApiKey, Long ipid, String from, String to) throws ApiException {
        com.squareup.okhttp.Call call = iPStatRouterGetAllAggregateIPStatsValidateBeforeCall(xAccountApiKey, ipid, from, to, null, null);
        Type localVarReturnType = new TypeToken<ModelsStat>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get All Aggregate Stats
     * @param xAccountApiKey Account API Key (required)
     * @param ipid the IPId you want to get (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call iPStatRouterGetAllAggregateIPStatsAsync(String xAccountApiKey, Long ipid, String from, String to, final ApiCallback<ModelsStat> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = iPStatRouterGetAllAggregateIPStatsValidateBeforeCall(xAccountApiKey, ipid, from, to, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelsStat>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for iPStatRouterGetAllAggregateIPStatsByGroup
     * @param xAccountApiKey Account API Key (required)
     * @param ipid the IPId you want to get (required)
     * @param provider the group whose stats you want (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call iPStatRouterGetAllAggregateIPStatsByGroupCall(String xAccountApiKey, Long ipid, String provider, String from, String to, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/ip/stat/{ipid}/aggregate/provider"
            .replaceAll("\\{" + "ipid" + "\\}", apiClient.escapeString(ipid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to", to));
        if (provider != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("provider", provider));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccountApiKey != null)
        localVarHeaderParams.put("X-Account-ApiKey", apiClient.parameterToString(xAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call iPStatRouterGetAllAggregateIPStatsByGroupValidateBeforeCall(String xAccountApiKey, Long ipid, String provider, String from, String to, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xAccountApiKey' is set
        if (xAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xAccountApiKey' when calling iPStatRouterGetAllAggregateIPStatsByGroup(Async)");
        }
        
        // verify the required parameter 'ipid' is set
        if (ipid == null) {
            throw new ApiException("Missing the required parameter 'ipid' when calling iPStatRouterGetAllAggregateIPStatsByGroup(Async)");
        }
        
        // verify the required parameter 'provider' is set
        if (provider == null) {
            throw new ApiException("Missing the required parameter 'provider' when calling iPStatRouterGetAllAggregateIPStatsByGroup(Async)");
        }
        

        com.squareup.okhttp.Call call = iPStatRouterGetAllAggregateIPStatsByGroupCall(xAccountApiKey, ipid, provider, from, to, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get All Aggregate Stats by Group
     * @param xAccountApiKey Account API Key (required)
     * @param ipid the IPId you want to get (required)
     * @param provider the group whose stats you want (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @return ModelsStat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelsStat iPStatRouterGetAllAggregateIPStatsByGroup(String xAccountApiKey, Long ipid, String provider, String from, String to) throws ApiException {
        ApiResponse<ModelsStat> resp = iPStatRouterGetAllAggregateIPStatsByGroupWithHttpInfo(xAccountApiKey, ipid, provider, from, to);
        return resp.getData();
    }

    /**
     * 
     * Get All Aggregate Stats by Group
     * @param xAccountApiKey Account API Key (required)
     * @param ipid the IPId you want to get (required)
     * @param provider the group whose stats you want (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @return ApiResponse&lt;ModelsStat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelsStat> iPStatRouterGetAllAggregateIPStatsByGroupWithHttpInfo(String xAccountApiKey, Long ipid, String provider, String from, String to) throws ApiException {
        com.squareup.okhttp.Call call = iPStatRouterGetAllAggregateIPStatsByGroupValidateBeforeCall(xAccountApiKey, ipid, provider, from, to, null, null);
        Type localVarReturnType = new TypeToken<ModelsStat>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get All Aggregate Stats by Group
     * @param xAccountApiKey Account API Key (required)
     * @param ipid the IPId you want to get (required)
     * @param provider the group whose stats you want (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call iPStatRouterGetAllAggregateIPStatsByGroupAsync(String xAccountApiKey, Long ipid, String provider, String from, String to, final ApiCallback<ModelsStat> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = iPStatRouterGetAllAggregateIPStatsByGroupValidateBeforeCall(xAccountApiKey, ipid, provider, from, to, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelsStat>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for iPStatRouterGetAllAggregatedProviderStatsForAIP
     * @param xAccountApiKey Account API Key (required)
     * @param ipid the IPId you want to get (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call iPStatRouterGetAllAggregatedProviderStatsForAIPCall(String xAccountApiKey, Long ipid, String from, String to, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/ip/stat/{ipid}/aggregate/providers"
            .replaceAll("\\{" + "ipid" + "\\}", apiClient.escapeString(ipid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to", to));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccountApiKey != null)
        localVarHeaderParams.put("X-Account-ApiKey", apiClient.parameterToString(xAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call iPStatRouterGetAllAggregatedProviderStatsForAIPValidateBeforeCall(String xAccountApiKey, Long ipid, String from, String to, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xAccountApiKey' is set
        if (xAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xAccountApiKey' when calling iPStatRouterGetAllAggregatedProviderStatsForAIP(Async)");
        }
        
        // verify the required parameter 'ipid' is set
        if (ipid == null) {
            throw new ApiException("Missing the required parameter 'ipid' when calling iPStatRouterGetAllAggregatedProviderStatsForAIP(Async)");
        }
        

        com.squareup.okhttp.Call call = iPStatRouterGetAllAggregatedProviderStatsForAIPCall(xAccountApiKey, ipid, from, to, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get All Aggregated Provider Stats for a IP
     * @param xAccountApiKey Account API Key (required)
     * @param ipid the IPId you want to get (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @return List&lt;ModelsPIPStat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ModelsPIPStat> iPStatRouterGetAllAggregatedProviderStatsForAIP(String xAccountApiKey, Long ipid, String from, String to) throws ApiException {
        ApiResponse<List<ModelsPIPStat>> resp = iPStatRouterGetAllAggregatedProviderStatsForAIPWithHttpInfo(xAccountApiKey, ipid, from, to);
        return resp.getData();
    }

    /**
     * 
     * Get All Aggregated Provider Stats for a IP
     * @param xAccountApiKey Account API Key (required)
     * @param ipid the IPId you want to get (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @return ApiResponse&lt;List&lt;ModelsPIPStat&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ModelsPIPStat>> iPStatRouterGetAllAggregatedProviderStatsForAIPWithHttpInfo(String xAccountApiKey, Long ipid, String from, String to) throws ApiException {
        com.squareup.okhttp.Call call = iPStatRouterGetAllAggregatedProviderStatsForAIPValidateBeforeCall(xAccountApiKey, ipid, from, to, null, null);
        Type localVarReturnType = new TypeToken<List<ModelsPIPStat>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get All Aggregated Provider Stats for a IP
     * @param xAccountApiKey Account API Key (required)
     * @param ipid the IPId you want to get (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call iPStatRouterGetAllAggregatedProviderStatsForAIPAsync(String xAccountApiKey, Long ipid, String from, String to, final ApiCallback<List<ModelsPIPStat>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = iPStatRouterGetAllAggregatedProviderStatsForAIPValidateBeforeCall(xAccountApiKey, ipid, from, to, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ModelsPIPStat>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for iPStatRouterGetAllAggregatedProviderStatsForASpecificSubAccountOfAIP
     * @param xAccountApiKey Account API Key (required)
     * @param ipid the IPId you want to get (required)
     * @param sid the Sub Account Id you want to get (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call iPStatRouterGetAllAggregatedProviderStatsForASpecificSubAccountOfAIPCall(String xAccountApiKey, Long ipid, Long sid, String from, String to, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/ip/stat/{ipid}/aggregate/sid/{sid}/providers"
            .replaceAll("\\{" + "ipid" + "\\}", apiClient.escapeString(ipid.toString()))
            .replaceAll("\\{" + "sid" + "\\}", apiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to", to));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccountApiKey != null)
        localVarHeaderParams.put("X-Account-ApiKey", apiClient.parameterToString(xAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call iPStatRouterGetAllAggregatedProviderStatsForASpecificSubAccountOfAIPValidateBeforeCall(String xAccountApiKey, Long ipid, Long sid, String from, String to, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xAccountApiKey' is set
        if (xAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xAccountApiKey' when calling iPStatRouterGetAllAggregatedProviderStatsForASpecificSubAccountOfAIP(Async)");
        }
        
        // verify the required parameter 'ipid' is set
        if (ipid == null) {
            throw new ApiException("Missing the required parameter 'ipid' when calling iPStatRouterGetAllAggregatedProviderStatsForASpecificSubAccountOfAIP(Async)");
        }
        
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling iPStatRouterGetAllAggregatedProviderStatsForASpecificSubAccountOfAIP(Async)");
        }
        

        com.squareup.okhttp.Call call = iPStatRouterGetAllAggregatedProviderStatsForASpecificSubAccountOfAIPCall(xAccountApiKey, ipid, sid, from, to, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get All Aggregated Provider Stats for a Specific Sub-Account of a IP
     * @param xAccountApiKey Account API Key (required)
     * @param ipid the IPId you want to get (required)
     * @param sid the Sub Account Id you want to get (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @return List&lt;ModelsPIPStat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ModelsPIPStat> iPStatRouterGetAllAggregatedProviderStatsForASpecificSubAccountOfAIP(String xAccountApiKey, Long ipid, Long sid, String from, String to) throws ApiException {
        ApiResponse<List<ModelsPIPStat>> resp = iPStatRouterGetAllAggregatedProviderStatsForASpecificSubAccountOfAIPWithHttpInfo(xAccountApiKey, ipid, sid, from, to);
        return resp.getData();
    }

    /**
     * 
     * Get All Aggregated Provider Stats for a Specific Sub-Account of a IP
     * @param xAccountApiKey Account API Key (required)
     * @param ipid the IPId you want to get (required)
     * @param sid the Sub Account Id you want to get (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @return ApiResponse&lt;List&lt;ModelsPIPStat&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ModelsPIPStat>> iPStatRouterGetAllAggregatedProviderStatsForASpecificSubAccountOfAIPWithHttpInfo(String xAccountApiKey, Long ipid, Long sid, String from, String to) throws ApiException {
        com.squareup.okhttp.Call call = iPStatRouterGetAllAggregatedProviderStatsForASpecificSubAccountOfAIPValidateBeforeCall(xAccountApiKey, ipid, sid, from, to, null, null);
        Type localVarReturnType = new TypeToken<List<ModelsPIPStat>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get All Aggregated Provider Stats for a Specific Sub-Account of a IP
     * @param xAccountApiKey Account API Key (required)
     * @param ipid the IPId you want to get (required)
     * @param sid the Sub Account Id you want to get (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call iPStatRouterGetAllAggregatedProviderStatsForASpecificSubAccountOfAIPAsync(String xAccountApiKey, Long ipid, Long sid, String from, String to, final ApiCallback<List<ModelsPIPStat>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = iPStatRouterGetAllAggregatedProviderStatsForASpecificSubAccountOfAIPValidateBeforeCall(xAccountApiKey, ipid, sid, from, to, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ModelsPIPStat>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for iPStatRouterGetAllAggregatedSubAccountStatsForAnIP
     * @param xAccountApiKey Account API Key (required)
     * @param ipid the IPId you want to get (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call iPStatRouterGetAllAggregatedSubAccountStatsForAnIPCall(String xAccountApiKey, Long ipid, String from, String to, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/ip/stat/{ipid}/aggregate/subaccounts"
            .replaceAll("\\{" + "ipid" + "\\}", apiClient.escapeString(ipid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to", to));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccountApiKey != null)
        localVarHeaderParams.put("X-Account-ApiKey", apiClient.parameterToString(xAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call iPStatRouterGetAllAggregatedSubAccountStatsForAnIPValidateBeforeCall(String xAccountApiKey, Long ipid, String from, String to, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xAccountApiKey' is set
        if (xAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xAccountApiKey' when calling iPStatRouterGetAllAggregatedSubAccountStatsForAnIP(Async)");
        }
        
        // verify the required parameter 'ipid' is set
        if (ipid == null) {
            throw new ApiException("Missing the required parameter 'ipid' when calling iPStatRouterGetAllAggregatedSubAccountStatsForAnIP(Async)");
        }
        

        com.squareup.okhttp.Call call = iPStatRouterGetAllAggregatedSubAccountStatsForAnIPCall(xAccountApiKey, ipid, from, to, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get All Aggregated Sub-Account Stats for an IP
     * @param xAccountApiKey Account API Key (required)
     * @param ipid the IPId you want to get (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @return List&lt;ModelsSIPStat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ModelsSIPStat> iPStatRouterGetAllAggregatedSubAccountStatsForAnIP(String xAccountApiKey, Long ipid, String from, String to) throws ApiException {
        ApiResponse<List<ModelsSIPStat>> resp = iPStatRouterGetAllAggregatedSubAccountStatsForAnIPWithHttpInfo(xAccountApiKey, ipid, from, to);
        return resp.getData();
    }

    /**
     * 
     * Get All Aggregated Sub-Account Stats for an IP
     * @param xAccountApiKey Account API Key (required)
     * @param ipid the IPId you want to get (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @return ApiResponse&lt;List&lt;ModelsSIPStat&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ModelsSIPStat>> iPStatRouterGetAllAggregatedSubAccountStatsForAnIPWithHttpInfo(String xAccountApiKey, Long ipid, String from, String to) throws ApiException {
        com.squareup.okhttp.Call call = iPStatRouterGetAllAggregatedSubAccountStatsForAnIPValidateBeforeCall(xAccountApiKey, ipid, from, to, null, null);
        Type localVarReturnType = new TypeToken<List<ModelsSIPStat>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get All Aggregated Sub-Account Stats for an IP
     * @param xAccountApiKey Account API Key (required)
     * @param ipid the IPId you want to get (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call iPStatRouterGetAllAggregatedSubAccountStatsForAnIPAsync(String xAccountApiKey, Long ipid, String from, String to, final ApiCallback<List<ModelsSIPStat>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = iPStatRouterGetAllAggregatedSubAccountStatsForAnIPValidateBeforeCall(xAccountApiKey, ipid, from, to, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ModelsSIPStat>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for iPStatRouterGetAllIPStats
     * @param xAccountApiKey Account API Key (required)
     * @param ipid the IPId you want to get (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call iPStatRouterGetAllIPStatsCall(String xAccountApiKey, Long ipid, String from, String to, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/ip/stat/{ipid}"
            .replaceAll("\\{" + "ipid" + "\\}", apiClient.escapeString(ipid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to", to));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccountApiKey != null)
        localVarHeaderParams.put("X-Account-ApiKey", apiClient.parameterToString(xAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call iPStatRouterGetAllIPStatsValidateBeforeCall(String xAccountApiKey, Long ipid, String from, String to, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xAccountApiKey' is set
        if (xAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xAccountApiKey' when calling iPStatRouterGetAllIPStats(Async)");
        }
        
        // verify the required parameter 'ipid' is set
        if (ipid == null) {
            throw new ApiException("Missing the required parameter 'ipid' when calling iPStatRouterGetAllIPStats(Async)");
        }
        

        com.squareup.okhttp.Call call = iPStatRouterGetAllIPStatsCall(xAccountApiKey, ipid, from, to, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get All IP Stats
     * @param xAccountApiKey Account API Key (required)
     * @param ipid the IPId you want to get (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @return List&lt;ModelsRIPStat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ModelsRIPStat> iPStatRouterGetAllIPStats(String xAccountApiKey, Long ipid, String from, String to) throws ApiException {
        ApiResponse<List<ModelsRIPStat>> resp = iPStatRouterGetAllIPStatsWithHttpInfo(xAccountApiKey, ipid, from, to);
        return resp.getData();
    }

    /**
     * 
     * Get All IP Stats
     * @param xAccountApiKey Account API Key (required)
     * @param ipid the IPId you want to get (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @return ApiResponse&lt;List&lt;ModelsRIPStat&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ModelsRIPStat>> iPStatRouterGetAllIPStatsWithHttpInfo(String xAccountApiKey, Long ipid, String from, String to) throws ApiException {
        com.squareup.okhttp.Call call = iPStatRouterGetAllIPStatsValidateBeforeCall(xAccountApiKey, ipid, from, to, null, null);
        Type localVarReturnType = new TypeToken<List<ModelsRIPStat>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get All IP Stats
     * @param xAccountApiKey Account API Key (required)
     * @param ipid the IPId you want to get (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call iPStatRouterGetAllIPStatsAsync(String xAccountApiKey, Long ipid, String from, String to, final ApiCallback<List<ModelsRIPStat>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = iPStatRouterGetAllIPStatsValidateBeforeCall(xAccountApiKey, ipid, from, to, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ModelsRIPStat>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for iPStatRouterGetAllIPStatsByGroup
     * @param ipid the IPId you want to get (required)
     * @param xAccountApiKey Account API Key (required)
     * @param provider the provider whose stats you want (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call iPStatRouterGetAllIPStatsByGroupCall(Long ipid, String xAccountApiKey, String provider, String from, String to, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/ip/stat/{ipid}/provider"
            .replaceAll("\\{" + "ipid" + "\\}", apiClient.escapeString(ipid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to", to));
        if (provider != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("provider", provider));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccountApiKey != null)
        localVarHeaderParams.put("X-Account-ApiKey", apiClient.parameterToString(xAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call iPStatRouterGetAllIPStatsByGroupValidateBeforeCall(Long ipid, String xAccountApiKey, String provider, String from, String to, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ipid' is set
        if (ipid == null) {
            throw new ApiException("Missing the required parameter 'ipid' when calling iPStatRouterGetAllIPStatsByGroup(Async)");
        }
        
        // verify the required parameter 'xAccountApiKey' is set
        if (xAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xAccountApiKey' when calling iPStatRouterGetAllIPStatsByGroup(Async)");
        }
        
        // verify the required parameter 'provider' is set
        if (provider == null) {
            throw new ApiException("Missing the required parameter 'provider' when calling iPStatRouterGetAllIPStatsByGroup(Async)");
        }
        

        com.squareup.okhttp.Call call = iPStatRouterGetAllIPStatsByGroupCall(ipid, xAccountApiKey, provider, from, to, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get All IP Stats by Group
     * @param ipid the IPId you want to get (required)
     * @param xAccountApiKey Account API Key (required)
     * @param provider the provider whose stats you want (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @return List&lt;ModelsRIPStat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ModelsRIPStat> iPStatRouterGetAllIPStatsByGroup(Long ipid, String xAccountApiKey, String provider, String from, String to) throws ApiException {
        ApiResponse<List<ModelsRIPStat>> resp = iPStatRouterGetAllIPStatsByGroupWithHttpInfo(ipid, xAccountApiKey, provider, from, to);
        return resp.getData();
    }

    /**
     * 
     * Get All IP Stats by Group
     * @param ipid the IPId you want to get (required)
     * @param xAccountApiKey Account API Key (required)
     * @param provider the provider whose stats you want (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @return ApiResponse&lt;List&lt;ModelsRIPStat&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ModelsRIPStat>> iPStatRouterGetAllIPStatsByGroupWithHttpInfo(Long ipid, String xAccountApiKey, String provider, String from, String to) throws ApiException {
        com.squareup.okhttp.Call call = iPStatRouterGetAllIPStatsByGroupValidateBeforeCall(ipid, xAccountApiKey, provider, from, to, null, null);
        Type localVarReturnType = new TypeToken<List<ModelsRIPStat>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get All IP Stats by Group
     * @param ipid the IPId you want to get (required)
     * @param xAccountApiKey Account API Key (required)
     * @param provider the provider whose stats you want (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call iPStatRouterGetAllIPStatsByGroupAsync(Long ipid, String xAccountApiKey, String provider, String from, String to, final ApiCallback<List<ModelsRIPStat>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = iPStatRouterGetAllIPStatsByGroupValidateBeforeCall(ipid, xAccountApiKey, provider, from, to, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ModelsRIPStat>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
