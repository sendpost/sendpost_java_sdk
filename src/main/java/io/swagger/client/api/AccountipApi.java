/*
 * SendPost API
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ModelsCountStat;
import io.swagger.client.model.ModelsDeleteResponse;
import io.swagger.client.model.ModelsIIP;
import io.swagger.client.model.ModelsIP;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountipApi {
    private ApiClient apiClient;

    public AccountipApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountipApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for iPRouterAllocateIP
     * @param xAccountApiKey Account API Key (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call iPRouterAllocateIPCall(String xAccountApiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/ip/allocate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccountApiKey != null)
        localVarHeaderParams.put("X-Account-ApiKey", apiClient.parameterToString(xAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call iPRouterAllocateIPValidateBeforeCall(String xAccountApiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xAccountApiKey' is set
        if (xAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xAccountApiKey' when calling iPRouterAllocateIP(Async)");
        }
        

        com.squareup.okhttp.Call call = iPRouterAllocateIPCall(xAccountApiKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Allocate IP To Account
     * @param xAccountApiKey Account API Key (required)
     * @return List&lt;ModelsIP&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ModelsIP> iPRouterAllocateIP(String xAccountApiKey) throws ApiException {
        ApiResponse<List<ModelsIP>> resp = iPRouterAllocateIPWithHttpInfo(xAccountApiKey);
        return resp.getData();
    }

    /**
     * 
     * Allocate IP To Account
     * @param xAccountApiKey Account API Key (required)
     * @return ApiResponse&lt;List&lt;ModelsIP&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ModelsIP>> iPRouterAllocateIPWithHttpInfo(String xAccountApiKey) throws ApiException {
        com.squareup.okhttp.Call call = iPRouterAllocateIPValidateBeforeCall(xAccountApiKey, null, null);
        Type localVarReturnType = new TypeToken<List<ModelsIP>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Allocate IP To Account
     * @param xAccountApiKey Account API Key (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call iPRouterAllocateIPAsync(String xAccountApiKey, final ApiCallback<List<ModelsIP>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = iPRouterAllocateIPValidateBeforeCall(xAccountApiKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ModelsIP>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for iPRouterCount
     * @param xAccountApiKey Account API Key (required)
     * @param search search term (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call iPRouterCountCall(String xAccountApiKey, String search, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/ip/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (search != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search", search));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccountApiKey != null)
        localVarHeaderParams.put("X-Account-ApiKey", apiClient.parameterToString(xAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call iPRouterCountValidateBeforeCall(String xAccountApiKey, String search, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xAccountApiKey' is set
        if (xAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xAccountApiKey' when calling iPRouterCount(Async)");
        }
        

        com.squareup.okhttp.Call call = iPRouterCountCall(xAccountApiKey, search, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Count Total AccountIPs
     * @param xAccountApiKey Account API Key (required)
     * @param search search term (optional)
     * @return ModelsCountStat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelsCountStat iPRouterCount(String xAccountApiKey, String search) throws ApiException {
        ApiResponse<ModelsCountStat> resp = iPRouterCountWithHttpInfo(xAccountApiKey, search);
        return resp.getData();
    }

    /**
     * 
     * Count Total AccountIPs
     * @param xAccountApiKey Account API Key (required)
     * @param search search term (optional)
     * @return ApiResponse&lt;ModelsCountStat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelsCountStat> iPRouterCountWithHttpInfo(String xAccountApiKey, String search) throws ApiException {
        com.squareup.okhttp.Call call = iPRouterCountValidateBeforeCall(xAccountApiKey, search, null, null);
        Type localVarReturnType = new TypeToken<ModelsCountStat>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Count Total AccountIPs
     * @param xAccountApiKey Account API Key (required)
     * @param search search term (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call iPRouterCountAsync(String xAccountApiKey, String search, final ApiCallback<ModelsCountStat> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = iPRouterCountValidateBeforeCall(xAccountApiKey, search, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelsCountStat>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for iPRouterDelete
     * @param xAccountApiKey Account API Key (required)
     * @param ipid The IPId you want to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call iPRouterDeleteCall(String xAccountApiKey, Long ipid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/ip/{ipid}"
            .replaceAll("\\{" + "ipid" + "\\}", apiClient.escapeString(ipid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccountApiKey != null)
        localVarHeaderParams.put("X-Account-ApiKey", apiClient.parameterToString(xAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call iPRouterDeleteValidateBeforeCall(String xAccountApiKey, Long ipid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xAccountApiKey' is set
        if (xAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xAccountApiKey' when calling iPRouterDelete(Async)");
        }
        
        // verify the required parameter 'ipid' is set
        if (ipid == null) {
            throw new ApiException("Missing the required parameter 'ipid' when calling iPRouterDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = iPRouterDeleteCall(xAccountApiKey, ipid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete IP
     * @param xAccountApiKey Account API Key (required)
     * @param ipid The IPId you want to delete (required)
     * @return ModelsDeleteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelsDeleteResponse iPRouterDelete(String xAccountApiKey, Long ipid) throws ApiException {
        ApiResponse<ModelsDeleteResponse> resp = iPRouterDeleteWithHttpInfo(xAccountApiKey, ipid);
        return resp.getData();
    }

    /**
     * 
     * Delete IP
     * @param xAccountApiKey Account API Key (required)
     * @param ipid The IPId you want to delete (required)
     * @return ApiResponse&lt;ModelsDeleteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelsDeleteResponse> iPRouterDeleteWithHttpInfo(String xAccountApiKey, Long ipid) throws ApiException {
        com.squareup.okhttp.Call call = iPRouterDeleteValidateBeforeCall(xAccountApiKey, ipid, null, null);
        Type localVarReturnType = new TypeToken<ModelsDeleteResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete IP
     * @param xAccountApiKey Account API Key (required)
     * @param ipid The IPId you want to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call iPRouterDeleteAsync(String xAccountApiKey, Long ipid, final ApiCallback<ModelsDeleteResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = iPRouterDeleteValidateBeforeCall(xAccountApiKey, ipid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelsDeleteResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for iPRouterGet
     * @param xAccountApiKey Account API Key (required)
     * @param ipid the IPId you want to get (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call iPRouterGetCall(String xAccountApiKey, Long ipid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/ip/{ipid}"
            .replaceAll("\\{" + "ipid" + "\\}", apiClient.escapeString(ipid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccountApiKey != null)
        localVarHeaderParams.put("X-Account-ApiKey", apiClient.parameterToString(xAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call iPRouterGetValidateBeforeCall(String xAccountApiKey, Long ipid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xAccountApiKey' is set
        if (xAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xAccountApiKey' when calling iPRouterGet(Async)");
        }
        
        // verify the required parameter 'ipid' is set
        if (ipid == null) {
            throw new ApiException("Missing the required parameter 'ipid' when calling iPRouterGet(Async)");
        }
        

        com.squareup.okhttp.Call call = iPRouterGetCall(xAccountApiKey, ipid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Find IP by IPId
     * @param xAccountApiKey Account API Key (required)
     * @param ipid the IPId you want to get (required)
     * @return ModelsIP
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelsIP iPRouterGet(String xAccountApiKey, Long ipid) throws ApiException {
        ApiResponse<ModelsIP> resp = iPRouterGetWithHttpInfo(xAccountApiKey, ipid);
        return resp.getData();
    }

    /**
     * 
     * Find IP by IPId
     * @param xAccountApiKey Account API Key (required)
     * @param ipid the IPId you want to get (required)
     * @return ApiResponse&lt;ModelsIP&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelsIP> iPRouterGetWithHttpInfo(String xAccountApiKey, Long ipid) throws ApiException {
        com.squareup.okhttp.Call call = iPRouterGetValidateBeforeCall(xAccountApiKey, ipid, null, null);
        Type localVarReturnType = new TypeToken<ModelsIP>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Find IP by IPId
     * @param xAccountApiKey Account API Key (required)
     * @param ipid the IPId you want to get (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call iPRouterGetAsync(String xAccountApiKey, Long ipid, final ApiCallback<ModelsIP> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = iPRouterGetValidateBeforeCall(xAccountApiKey, ipid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelsIP>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for iPRouterGetAll
     * @param xAccountApiKey Account API Key (required)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @param search search term (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call iPRouterGetAllCall(String xAccountApiKey, Long offset, Long limit, String search, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/ip/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (search != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search", search));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccountApiKey != null)
        localVarHeaderParams.put("X-Account-ApiKey", apiClient.parameterToString(xAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call iPRouterGetAllValidateBeforeCall(String xAccountApiKey, Long offset, Long limit, String search, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xAccountApiKey' is set
        if (xAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xAccountApiKey' when calling iPRouterGetAll(Async)");
        }
        

        com.squareup.okhttp.Call call = iPRouterGetAllCall(xAccountApiKey, offset, limit, search, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get All IPs
     * @param xAccountApiKey Account API Key (required)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @param search search term (optional)
     * @return List&lt;ModelsIP&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ModelsIP> iPRouterGetAll(String xAccountApiKey, Long offset, Long limit, String search) throws ApiException {
        ApiResponse<List<ModelsIP>> resp = iPRouterGetAllWithHttpInfo(xAccountApiKey, offset, limit, search);
        return resp.getData();
    }

    /**
     * 
     * Get All IPs
     * @param xAccountApiKey Account API Key (required)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @param search search term (optional)
     * @return ApiResponse&lt;List&lt;ModelsIP&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ModelsIP>> iPRouterGetAllWithHttpInfo(String xAccountApiKey, Long offset, Long limit, String search) throws ApiException {
        com.squareup.okhttp.Call call = iPRouterGetAllValidateBeforeCall(xAccountApiKey, offset, limit, search, null, null);
        Type localVarReturnType = new TypeToken<List<ModelsIP>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get All IPs
     * @param xAccountApiKey Account API Key (required)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @param search search term (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call iPRouterGetAllAsync(String xAccountApiKey, Long offset, Long limit, String search, final ApiCallback<List<ModelsIP>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = iPRouterGetAllValidateBeforeCall(xAccountApiKey, offset, limit, search, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ModelsIP>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for iPRouterUpdate
     * @param xAccountApiKey Account API Key (required)
     * @param ipid The IP you want to update (required)
     * @param body The IP Email Provider Settings (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call iPRouterUpdateCall(String xAccountApiKey, Long ipid, ModelsIIP body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/account/ip/{ipid}"
            .replaceAll("\\{" + "ipid" + "\\}", apiClient.escapeString(ipid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccountApiKey != null)
        localVarHeaderParams.put("X-Account-ApiKey", apiClient.parameterToString(xAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call iPRouterUpdateValidateBeforeCall(String xAccountApiKey, Long ipid, ModelsIIP body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xAccountApiKey' is set
        if (xAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xAccountApiKey' when calling iPRouterUpdate(Async)");
        }
        
        // verify the required parameter 'ipid' is set
        if (ipid == null) {
            throw new ApiException("Missing the required parameter 'ipid' when calling iPRouterUpdate(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling iPRouterUpdate(Async)");
        }
        

        com.squareup.okhttp.Call call = iPRouterUpdateCall(xAccountApiKey, ipid, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Update an IP
     * @param xAccountApiKey Account API Key (required)
     * @param ipid The IP you want to update (required)
     * @param body The IP Email Provider Settings (required)
     * @return ModelsIP
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelsIP iPRouterUpdate(String xAccountApiKey, Long ipid, ModelsIIP body) throws ApiException {
        ApiResponse<ModelsIP> resp = iPRouterUpdateWithHttpInfo(xAccountApiKey, ipid, body);
        return resp.getData();
    }

    /**
     * 
     * Update an IP
     * @param xAccountApiKey Account API Key (required)
     * @param ipid The IP you want to update (required)
     * @param body The IP Email Provider Settings (required)
     * @return ApiResponse&lt;ModelsIP&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelsIP> iPRouterUpdateWithHttpInfo(String xAccountApiKey, Long ipid, ModelsIIP body) throws ApiException {
        com.squareup.okhttp.Call call = iPRouterUpdateValidateBeforeCall(xAccountApiKey, ipid, body, null, null);
        Type localVarReturnType = new TypeToken<ModelsIP>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an IP
     * @param xAccountApiKey Account API Key (required)
     * @param ipid The IP you want to update (required)
     * @param body The IP Email Provider Settings (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call iPRouterUpdateAsync(String xAccountApiKey, Long ipid, ModelsIIP body, final ApiCallback<ModelsIP> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = iPRouterUpdateValidateBeforeCall(xAccountApiKey, ipid, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelsIP>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
