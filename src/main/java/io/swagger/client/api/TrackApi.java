/*
 * SendPost API
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TrackApi {
    private ApiClient apiClient;

    public TrackApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TrackApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for trackRouterTrackEmailOpen
     * @param ipId The id of ip from which this email message was sent (required)
     * @param accountId The id of account from which email is being sent (required)
     * @param subAccountId The id of sub-account from which email is being sent (required)
     * @param messageId The UUID of message which was sent (required)
     * @param emailType The type of email such as gmail, yahoo etc. which was sent. This is inferred from to email address (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call trackRouterTrackEmailOpenCall(Long ipId, Long accountId, Long subAccountId, String messageId, String emailType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/track/open/{accountId}/{subAccountId}/{ipId}/{emailType}/{messageId}/1.png"
            .replaceAll("\\{" + "ipId" + "\\}", apiClient.escapeString(ipId.toString()))
            .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
            .replaceAll("\\{" + "subAccountId" + "\\}", apiClient.escapeString(subAccountId.toString()))
            .replaceAll("\\{" + "messageId" + "\\}", apiClient.escapeString(messageId.toString()))
            .replaceAll("\\{" + "emailType" + "\\}", apiClient.escapeString(emailType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call trackRouterTrackEmailOpenValidateBeforeCall(Long ipId, Long accountId, Long subAccountId, String messageId, String emailType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ipId' is set
        if (ipId == null) {
            throw new ApiException("Missing the required parameter 'ipId' when calling trackRouterTrackEmailOpen(Async)");
        }
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling trackRouterTrackEmailOpen(Async)");
        }
        
        // verify the required parameter 'subAccountId' is set
        if (subAccountId == null) {
            throw new ApiException("Missing the required parameter 'subAccountId' when calling trackRouterTrackEmailOpen(Async)");
        }
        
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling trackRouterTrackEmailOpen(Async)");
        }
        
        // verify the required parameter 'emailType' is set
        if (emailType == null) {
            throw new ApiException("Missing the required parameter 'emailType' when calling trackRouterTrackEmailOpen(Async)");
        }
        

        com.squareup.okhttp.Call call = trackRouterTrackEmailOpenCall(ipId, accountId, subAccountId, messageId, emailType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Track Email Open
     * @param ipId The id of ip from which this email message was sent (required)
     * @param accountId The id of account from which email is being sent (required)
     * @param subAccountId The id of sub-account from which email is being sent (required)
     * @param messageId The UUID of message which was sent (required)
     * @param emailType The type of email such as gmail, yahoo etc. which was sent. This is inferred from to email address (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void trackRouterTrackEmailOpen(Long ipId, Long accountId, Long subAccountId, String messageId, String emailType) throws ApiException {
        trackRouterTrackEmailOpenWithHttpInfo(ipId, accountId, subAccountId, messageId, emailType);
    }

    /**
     * 
     * Track Email Open
     * @param ipId The id of ip from which this email message was sent (required)
     * @param accountId The id of account from which email is being sent (required)
     * @param subAccountId The id of sub-account from which email is being sent (required)
     * @param messageId The UUID of message which was sent (required)
     * @param emailType The type of email such as gmail, yahoo etc. which was sent. This is inferred from to email address (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> trackRouterTrackEmailOpenWithHttpInfo(Long ipId, Long accountId, Long subAccountId, String messageId, String emailType) throws ApiException {
        com.squareup.okhttp.Call call = trackRouterTrackEmailOpenValidateBeforeCall(ipId, accountId, subAccountId, messageId, emailType, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Track Email Open
     * @param ipId The id of ip from which this email message was sent (required)
     * @param accountId The id of account from which email is being sent (required)
     * @param subAccountId The id of sub-account from which email is being sent (required)
     * @param messageId The UUID of message which was sent (required)
     * @param emailType The type of email such as gmail, yahoo etc. which was sent. This is inferred from to email address (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call trackRouterTrackEmailOpenAsync(Long ipId, Long accountId, Long subAccountId, String messageId, String emailType, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = trackRouterTrackEmailOpenValidateBeforeCall(ipId, accountId, subAccountId, messageId, emailType, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for trackRouterTrackLinkClick
     * @param ipId The id of ip from which this email message was sent (required)
     * @param accountId The id of account from which email is being sent (required)
     * @param subAccountId The id of sub-account from which email is being sent (required)
     * @param messageId The UUID of message which was sent (required)
     * @param emailType The type of email such as gmail, yahoo etc. which was sent. This is inferred from to email address (required)
     * @param redirecturl The encoded redirect URL (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call trackRouterTrackLinkClickCall(Long ipId, Long accountId, Long subAccountId, String messageId, String emailType, String redirecturl, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/track/click/{accountId}/{subAccountId}/{ipId}/{emailType}/{messageId}"
            .replaceAll("\\{" + "ipId" + "\\}", apiClient.escapeString(ipId.toString()))
            .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
            .replaceAll("\\{" + "subAccountId" + "\\}", apiClient.escapeString(subAccountId.toString()))
            .replaceAll("\\{" + "messageId" + "\\}", apiClient.escapeString(messageId.toString()))
            .replaceAll("\\{" + "emailType" + "\\}", apiClient.escapeString(emailType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (redirecturl != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("redirecturl", redirecturl));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call trackRouterTrackLinkClickValidateBeforeCall(Long ipId, Long accountId, Long subAccountId, String messageId, String emailType, String redirecturl, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ipId' is set
        if (ipId == null) {
            throw new ApiException("Missing the required parameter 'ipId' when calling trackRouterTrackLinkClick(Async)");
        }
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling trackRouterTrackLinkClick(Async)");
        }
        
        // verify the required parameter 'subAccountId' is set
        if (subAccountId == null) {
            throw new ApiException("Missing the required parameter 'subAccountId' when calling trackRouterTrackLinkClick(Async)");
        }
        
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling trackRouterTrackLinkClick(Async)");
        }
        
        // verify the required parameter 'emailType' is set
        if (emailType == null) {
            throw new ApiException("Missing the required parameter 'emailType' when calling trackRouterTrackLinkClick(Async)");
        }
        
        // verify the required parameter 'redirecturl' is set
        if (redirecturl == null) {
            throw new ApiException("Missing the required parameter 'redirecturl' when calling trackRouterTrackLinkClick(Async)");
        }
        

        com.squareup.okhttp.Call call = trackRouterTrackLinkClickCall(ipId, accountId, subAccountId, messageId, emailType, redirecturl, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Track Link Click
     * @param ipId The id of ip from which this email message was sent (required)
     * @param accountId The id of account from which email is being sent (required)
     * @param subAccountId The id of sub-account from which email is being sent (required)
     * @param messageId The UUID of message which was sent (required)
     * @param emailType The type of email such as gmail, yahoo etc. which was sent. This is inferred from to email address (required)
     * @param redirecturl The encoded redirect URL (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void trackRouterTrackLinkClick(Long ipId, Long accountId, Long subAccountId, String messageId, String emailType, String redirecturl) throws ApiException {
        trackRouterTrackLinkClickWithHttpInfo(ipId, accountId, subAccountId, messageId, emailType, redirecturl);
    }

    /**
     * 
     * Track Link Click
     * @param ipId The id of ip from which this email message was sent (required)
     * @param accountId The id of account from which email is being sent (required)
     * @param subAccountId The id of sub-account from which email is being sent (required)
     * @param messageId The UUID of message which was sent (required)
     * @param emailType The type of email such as gmail, yahoo etc. which was sent. This is inferred from to email address (required)
     * @param redirecturl The encoded redirect URL (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> trackRouterTrackLinkClickWithHttpInfo(Long ipId, Long accountId, Long subAccountId, String messageId, String emailType, String redirecturl) throws ApiException {
        com.squareup.okhttp.Call call = trackRouterTrackLinkClickValidateBeforeCall(ipId, accountId, subAccountId, messageId, emailType, redirecturl, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Track Link Click
     * @param ipId The id of ip from which this email message was sent (required)
     * @param accountId The id of account from which email is being sent (required)
     * @param subAccountId The id of sub-account from which email is being sent (required)
     * @param messageId The UUID of message which was sent (required)
     * @param emailType The type of email such as gmail, yahoo etc. which was sent. This is inferred from to email address (required)
     * @param redirecturl The encoded redirect URL (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call trackRouterTrackLinkClickAsync(Long ipId, Long accountId, Long subAccountId, String messageId, String emailType, String redirecturl, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = trackRouterTrackLinkClickValidateBeforeCall(ipId, accountId, subAccountId, messageId, emailType, redirecturl, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for trackRouterTrackUnsubscribe
     * @param ipId The id of ip from which this email message was sent (required)
     * @param accountId The id of account from which email is being sent (required)
     * @param subAccountId The id of sub-account from which email is being sent (required)
     * @param messageId The UUID of message which was sent (required)
     * @param emailType The type of email such as gmail, yahoo etc. which was sent. This is inferred from to email address (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call trackRouterTrackUnsubscribeCall(Long ipId, Long accountId, Long subAccountId, String messageId, String emailType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/track/unsubscribe/{accountId}/{subAccountId}/{ipId}/{emailType}/{messageId}"
            .replaceAll("\\{" + "ipId" + "\\}", apiClient.escapeString(ipId.toString()))
            .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
            .replaceAll("\\{" + "subAccountId" + "\\}", apiClient.escapeString(subAccountId.toString()))
            .replaceAll("\\{" + "messageId" + "\\}", apiClient.escapeString(messageId.toString()))
            .replaceAll("\\{" + "emailType" + "\\}", apiClient.escapeString(emailType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call trackRouterTrackUnsubscribeValidateBeforeCall(Long ipId, Long accountId, Long subAccountId, String messageId, String emailType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ipId' is set
        if (ipId == null) {
            throw new ApiException("Missing the required parameter 'ipId' when calling trackRouterTrackUnsubscribe(Async)");
        }
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling trackRouterTrackUnsubscribe(Async)");
        }
        
        // verify the required parameter 'subAccountId' is set
        if (subAccountId == null) {
            throw new ApiException("Missing the required parameter 'subAccountId' when calling trackRouterTrackUnsubscribe(Async)");
        }
        
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling trackRouterTrackUnsubscribe(Async)");
        }
        
        // verify the required parameter 'emailType' is set
        if (emailType == null) {
            throw new ApiException("Missing the required parameter 'emailType' when calling trackRouterTrackUnsubscribe(Async)");
        }
        

        com.squareup.okhttp.Call call = trackRouterTrackUnsubscribeCall(ipId, accountId, subAccountId, messageId, emailType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * track link click
     * @param ipId The id of ip from which this email message was sent (required)
     * @param accountId The id of account from which email is being sent (required)
     * @param subAccountId The id of sub-account from which email is being sent (required)
     * @param messageId The UUID of message which was sent (required)
     * @param emailType The type of email such as gmail, yahoo etc. which was sent. This is inferred from to email address (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void trackRouterTrackUnsubscribe(Long ipId, Long accountId, Long subAccountId, String messageId, String emailType) throws ApiException {
        trackRouterTrackUnsubscribeWithHttpInfo(ipId, accountId, subAccountId, messageId, emailType);
    }

    /**
     * 
     * track link click
     * @param ipId The id of ip from which this email message was sent (required)
     * @param accountId The id of account from which email is being sent (required)
     * @param subAccountId The id of sub-account from which email is being sent (required)
     * @param messageId The UUID of message which was sent (required)
     * @param emailType The type of email such as gmail, yahoo etc. which was sent. This is inferred from to email address (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> trackRouterTrackUnsubscribeWithHttpInfo(Long ipId, Long accountId, Long subAccountId, String messageId, String emailType) throws ApiException {
        com.squareup.okhttp.Call call = trackRouterTrackUnsubscribeValidateBeforeCall(ipId, accountId, subAccountId, messageId, emailType, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * track link click
     * @param ipId The id of ip from which this email message was sent (required)
     * @param accountId The id of account from which email is being sent (required)
     * @param subAccountId The id of sub-account from which email is being sent (required)
     * @param messageId The UUID of message which was sent (required)
     * @param emailType The type of email such as gmail, yahoo etc. which was sent. This is inferred from to email address (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call trackRouterTrackUnsubscribeAsync(Long ipId, Long accountId, Long subAccountId, String messageId, String emailType, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = trackRouterTrackUnsubscribeValidateBeforeCall(ipId, accountId, subAccountId, messageId, emailType, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
