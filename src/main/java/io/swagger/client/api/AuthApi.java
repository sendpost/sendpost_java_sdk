/*
 * SendPost API
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ModelsAccount;
import io.swagger.client.model.ModelsAuthInfo;
import io.swagger.client.model.ModelsEAccount;
import io.swagger.client.model.ModelsEAccountMember;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthApi {
    private ApiClient apiClient;

    public AuthApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for authRouterCreate
     * @param body The Account content (required)
     * @param xToken Firebase dynamic token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call authRouterCreateCall(ModelsEAccount body, String xToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/auth/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xToken != null)
        localVarHeaderParams.put("X-Token", apiClient.parameterToString(xToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call authRouterCreateValidateBeforeCall(ModelsEAccount body, String xToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling authRouterCreate(Async)");
        }
        
        // verify the required parameter 'xToken' is set
        if (xToken == null) {
            throw new ApiException("Missing the required parameter 'xToken' when calling authRouterCreate(Async)");
        }
        

        com.squareup.okhttp.Call call = authRouterCreateCall(body, xToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create Account, sub-account and member
     * @param body The Account content (required)
     * @param xToken Firebase dynamic token (required)
     * @return ModelsAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelsAccount authRouterCreate(ModelsEAccount body, String xToken) throws ApiException {
        ApiResponse<ModelsAccount> resp = authRouterCreateWithHttpInfo(body, xToken);
        return resp.getData();
    }

    /**
     * 
     * Create Account, sub-account and member
     * @param body The Account content (required)
     * @param xToken Firebase dynamic token (required)
     * @return ApiResponse&lt;ModelsAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelsAccount> authRouterCreateWithHttpInfo(ModelsEAccount body, String xToken) throws ApiException {
        com.squareup.okhttp.Call call = authRouterCreateValidateBeforeCall(body, xToken, null, null);
        Type localVarReturnType = new TypeToken<ModelsAccount>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create Account, sub-account and member
     * @param body The Account content (required)
     * @param xToken Firebase dynamic token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call authRouterCreateAsync(ModelsEAccount body, String xToken, final ApiCallback<ModelsAccount> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = authRouterCreateValidateBeforeCall(body, xToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelsAccount>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for authRouterGetAuthInfo
     * @param body The Account content (required)
     * @param xToken Firebase dynamic token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call authRouterGetAuthInfoCall(ModelsEAccount body, String xToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/auth/info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xToken != null)
        localVarHeaderParams.put("X-Token", apiClient.parameterToString(xToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call authRouterGetAuthInfoValidateBeforeCall(ModelsEAccount body, String xToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling authRouterGetAuthInfo(Async)");
        }
        
        // verify the required parameter 'xToken' is set
        if (xToken == null) {
            throw new ApiException("Missing the required parameter 'xToken' when calling authRouterGetAuthInfo(Async)");
        }
        

        com.squareup.okhttp.Call call = authRouterGetAuthInfoCall(body, xToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get Auth Info Details
     * @param body The Account content (required)
     * @param xToken Firebase dynamic token (required)
     * @return ModelsAuthInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelsAuthInfo authRouterGetAuthInfo(ModelsEAccount body, String xToken) throws ApiException {
        ApiResponse<ModelsAuthInfo> resp = authRouterGetAuthInfoWithHttpInfo(body, xToken);
        return resp.getData();
    }

    /**
     * 
     * Get Auth Info Details
     * @param body The Account content (required)
     * @param xToken Firebase dynamic token (required)
     * @return ApiResponse&lt;ModelsAuthInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelsAuthInfo> authRouterGetAuthInfoWithHttpInfo(ModelsEAccount body, String xToken) throws ApiException {
        com.squareup.okhttp.Call call = authRouterGetAuthInfoValidateBeforeCall(body, xToken, null, null);
        Type localVarReturnType = new TypeToken<ModelsAuthInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Auth Info Details
     * @param body The Account content (required)
     * @param xToken Firebase dynamic token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call authRouterGetAuthInfoAsync(ModelsEAccount body, String xToken, final ApiCallback<ModelsAuthInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = authRouterGetAuthInfoValidateBeforeCall(body, xToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelsAuthInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for authRouterUpdateAuthInfo
     * @param body The Account Member content (required)
     * @param xToken Firebase dynamic token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call authRouterUpdateAuthInfoCall(ModelsEAccountMember body, String xToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/auth/info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xToken != null)
        localVarHeaderParams.put("X-Token", apiClient.parameterToString(xToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call authRouterUpdateAuthInfoValidateBeforeCall(ModelsEAccountMember body, String xToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling authRouterUpdateAuthInfo(Async)");
        }
        
        // verify the required parameter 'xToken' is set
        if (xToken == null) {
            throw new ApiException("Missing the required parameter 'xToken' when calling authRouterUpdateAuthInfo(Async)");
        }
        

        com.squareup.okhttp.Call call = authRouterUpdateAuthInfoCall(body, xToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Updates member and accounts related for email verification and on boarding answers
     * @param body The Account Member content (required)
     * @param xToken Firebase dynamic token (required)
     * @return ModelsAuthInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelsAuthInfo authRouterUpdateAuthInfo(ModelsEAccountMember body, String xToken) throws ApiException {
        ApiResponse<ModelsAuthInfo> resp = authRouterUpdateAuthInfoWithHttpInfo(body, xToken);
        return resp.getData();
    }

    /**
     * 
     * Updates member and accounts related for email verification and on boarding answers
     * @param body The Account Member content (required)
     * @param xToken Firebase dynamic token (required)
     * @return ApiResponse&lt;ModelsAuthInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelsAuthInfo> authRouterUpdateAuthInfoWithHttpInfo(ModelsEAccountMember body, String xToken) throws ApiException {
        com.squareup.okhttp.Call call = authRouterUpdateAuthInfoValidateBeforeCall(body, xToken, null, null);
        Type localVarReturnType = new TypeToken<ModelsAuthInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates member and accounts related for email verification and on boarding answers
     * @param body The Account Member content (required)
     * @param xToken Firebase dynamic token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call authRouterUpdateAuthInfoAsync(ModelsEAccountMember body, String xToken, final ApiCallback<ModelsAuthInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = authRouterUpdateAuthInfoValidateBeforeCall(body, xToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelsAuthInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
