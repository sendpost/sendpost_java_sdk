/*
 * SendPost API
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ModelsCountStat;
import io.swagger.client.model.ModelsQEvent;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccounteventApi {
    private ApiClient apiClient;

    public AccounteventApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccounteventApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for eventRouterCountAllEventsFromAAccountForAGivenTimeRange
     * @param xAccountApiKey Account API Key (required)
     * @param search search term (optional)
     * @param type search type (optional)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param source data source from which to get timestamp keys subaccount or ip (optional)
     * @param sourceId source id from which to get timestamp keys subaccount or ip (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call eventRouterCountAllEventsFromAAccountForAGivenTimeRangeCall(String xAccountApiKey, String search, String type, String from, String to, String source, String sourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/event/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (search != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search", search));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to", to));
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));
        if (sourceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sourceId", sourceId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccountApiKey != null)
        localVarHeaderParams.put("X-Account-ApiKey", apiClient.parameterToString(xAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call eventRouterCountAllEventsFromAAccountForAGivenTimeRangeValidateBeforeCall(String xAccountApiKey, String search, String type, String from, String to, String source, String sourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xAccountApiKey' is set
        if (xAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xAccountApiKey' when calling eventRouterCountAllEventsFromAAccountForAGivenTimeRange(Async)");
        }
        

        com.squareup.okhttp.Call call = eventRouterCountAllEventsFromAAccountForAGivenTimeRangeCall(xAccountApiKey, search, type, from, to, source, sourceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Count all events from a account for a given time-range
     * @param xAccountApiKey Account API Key (required)
     * @param search search term (optional)
     * @param type search type (optional)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param source data source from which to get timestamp keys subaccount or ip (optional)
     * @param sourceId source id from which to get timestamp keys subaccount or ip (optional)
     * @return ModelsCountStat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelsCountStat eventRouterCountAllEventsFromAAccountForAGivenTimeRange(String xAccountApiKey, String search, String type, String from, String to, String source, String sourceId) throws ApiException {
        ApiResponse<ModelsCountStat> resp = eventRouterCountAllEventsFromAAccountForAGivenTimeRangeWithHttpInfo(xAccountApiKey, search, type, from, to, source, sourceId);
        return resp.getData();
    }

    /**
     * 
     * Count all events from a account for a given time-range
     * @param xAccountApiKey Account API Key (required)
     * @param search search term (optional)
     * @param type search type (optional)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param source data source from which to get timestamp keys subaccount or ip (optional)
     * @param sourceId source id from which to get timestamp keys subaccount or ip (optional)
     * @return ApiResponse&lt;ModelsCountStat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelsCountStat> eventRouterCountAllEventsFromAAccountForAGivenTimeRangeWithHttpInfo(String xAccountApiKey, String search, String type, String from, String to, String source, String sourceId) throws ApiException {
        com.squareup.okhttp.Call call = eventRouterCountAllEventsFromAAccountForAGivenTimeRangeValidateBeforeCall(xAccountApiKey, search, type, from, to, source, sourceId, null, null);
        Type localVarReturnType = new TypeToken<ModelsCountStat>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Count all events from a account for a given time-range
     * @param xAccountApiKey Account API Key (required)
     * @param search search term (optional)
     * @param type search type (optional)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param source data source from which to get timestamp keys subaccount or ip (optional)
     * @param sourceId source id from which to get timestamp keys subaccount or ip (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call eventRouterCountAllEventsFromAAccountForAGivenTimeRangeAsync(String xAccountApiKey, String search, String type, String from, String to, String source, String sourceId, final ApiCallback<ModelsCountStat> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = eventRouterCountAllEventsFromAAccountForAGivenTimeRangeValidateBeforeCall(xAccountApiKey, search, type, from, to, source, sourceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelsCountStat>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for eventRouterCountAllEventsFromANodeOfASubAccountForAGivenTimeRange
     * @param xAccountApiKey Account API Key (required)
     * @param search search term (optional)
     * @param type search type (optional)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param source data source from which to get timestamp keys subaccount or ip (optional)
     * @param sourceId source id from which to get timestamp keys subaccount or ip (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call eventRouterCountAllEventsFromANodeOfASubAccountForAGivenTimeRangeCall(String xAccountApiKey, String search, String type, String from, String to, String source, String sourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/event/node/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (search != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search", search));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to", to));
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));
        if (sourceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sourceId", sourceId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccountApiKey != null)
        localVarHeaderParams.put("X-Account-ApiKey", apiClient.parameterToString(xAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call eventRouterCountAllEventsFromANodeOfASubAccountForAGivenTimeRangeValidateBeforeCall(String xAccountApiKey, String search, String type, String from, String to, String source, String sourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xAccountApiKey' is set
        if (xAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xAccountApiKey' when calling eventRouterCountAllEventsFromANodeOfASubAccountForAGivenTimeRange(Async)");
        }
        

        com.squareup.okhttp.Call call = eventRouterCountAllEventsFromANodeOfASubAccountForAGivenTimeRangeCall(xAccountApiKey, search, type, from, to, source, sourceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Count all events from a node of a sub-account for a given time-range
     * @param xAccountApiKey Account API Key (required)
     * @param search search term (optional)
     * @param type search type (optional)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param source data source from which to get timestamp keys subaccount or ip (optional)
     * @param sourceId source id from which to get timestamp keys subaccount or ip (optional)
     * @return ModelsCountStat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelsCountStat eventRouterCountAllEventsFromANodeOfASubAccountForAGivenTimeRange(String xAccountApiKey, String search, String type, String from, String to, String source, String sourceId) throws ApiException {
        ApiResponse<ModelsCountStat> resp = eventRouterCountAllEventsFromANodeOfASubAccountForAGivenTimeRangeWithHttpInfo(xAccountApiKey, search, type, from, to, source, sourceId);
        return resp.getData();
    }

    /**
     * 
     * Count all events from a node of a sub-account for a given time-range
     * @param xAccountApiKey Account API Key (required)
     * @param search search term (optional)
     * @param type search type (optional)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param source data source from which to get timestamp keys subaccount or ip (optional)
     * @param sourceId source id from which to get timestamp keys subaccount or ip (optional)
     * @return ApiResponse&lt;ModelsCountStat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelsCountStat> eventRouterCountAllEventsFromANodeOfASubAccountForAGivenTimeRangeWithHttpInfo(String xAccountApiKey, String search, String type, String from, String to, String source, String sourceId) throws ApiException {
        com.squareup.okhttp.Call call = eventRouterCountAllEventsFromANodeOfASubAccountForAGivenTimeRangeValidateBeforeCall(xAccountApiKey, search, type, from, to, source, sourceId, null, null);
        Type localVarReturnType = new TypeToken<ModelsCountStat>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Count all events from a node of a sub-account for a given time-range
     * @param xAccountApiKey Account API Key (required)
     * @param search search term (optional)
     * @param type search type (optional)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param source data source from which to get timestamp keys subaccount or ip (optional)
     * @param sourceId source id from which to get timestamp keys subaccount or ip (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call eventRouterCountAllEventsFromANodeOfASubAccountForAGivenTimeRangeAsync(String xAccountApiKey, String search, String type, String from, String to, String source, String sourceId, final ApiCallback<ModelsCountStat> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = eventRouterCountAllEventsFromANodeOfASubAccountForAGivenTimeRangeValidateBeforeCall(xAccountApiKey, search, type, from, to, source, sourceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelsCountStat>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for eventRouterGet
     * @param xAccountApiKey Account API Key (required)
     * @param eventId the eventId that you want to retrieve (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call eventRouterGetCall(String xAccountApiKey, String eventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/event/{eventId}"
            .replaceAll("\\{" + "eventId" + "\\}", apiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccountApiKey != null)
        localVarHeaderParams.put("X-Account-ApiKey", apiClient.parameterToString(xAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call eventRouterGetValidateBeforeCall(String xAccountApiKey, String eventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xAccountApiKey' is set
        if (xAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xAccountApiKey' when calling eventRouterGet(Async)");
        }
        
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling eventRouterGet(Async)");
        }
        

        com.squareup.okhttp.Call call = eventRouterGetCall(xAccountApiKey, eventId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Find Event By Id
     * @param xAccountApiKey Account API Key (required)
     * @param eventId the eventId that you want to retrieve (required)
     * @return ModelsQEvent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelsQEvent eventRouterGet(String xAccountApiKey, String eventId) throws ApiException {
        ApiResponse<ModelsQEvent> resp = eventRouterGetWithHttpInfo(xAccountApiKey, eventId);
        return resp.getData();
    }

    /**
     * 
     * Find Event By Id
     * @param xAccountApiKey Account API Key (required)
     * @param eventId the eventId that you want to retrieve (required)
     * @return ApiResponse&lt;ModelsQEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelsQEvent> eventRouterGetWithHttpInfo(String xAccountApiKey, String eventId) throws ApiException {
        com.squareup.okhttp.Call call = eventRouterGetValidateBeforeCall(xAccountApiKey, eventId, null, null);
        Type localVarReturnType = new TypeToken<ModelsQEvent>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Find Event By Id
     * @param xAccountApiKey Account API Key (required)
     * @param eventId the eventId that you want to retrieve (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call eventRouterGetAsync(String xAccountApiKey, String eventId, final ApiCallback<ModelsQEvent> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = eventRouterGetValidateBeforeCall(xAccountApiKey, eventId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelsQEvent>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for eventRouterGetAllEventTimestampKeysOfASubAccountFromASpecificNodeForAGivenTimeRange
     * @param xAccountApiKey Account API Key (required)
     * @param search search term (optional)
     * @param type search type (optional)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param source data source from which to get timestamp keys subaccount or ip (optional)
     * @param sourceId source id from which to get timestamp keys subaccount or ip (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call eventRouterGetAllEventTimestampKeysOfASubAccountFromASpecificNodeForAGivenTimeRangeCall(String xAccountApiKey, String search, String type, String from, String to, String source, String sourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/event/node/timestampkeys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (search != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search", search));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to", to));
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));
        if (sourceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sourceId", sourceId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccountApiKey != null)
        localVarHeaderParams.put("X-Account-ApiKey", apiClient.parameterToString(xAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call eventRouterGetAllEventTimestampKeysOfASubAccountFromASpecificNodeForAGivenTimeRangeValidateBeforeCall(String xAccountApiKey, String search, String type, String from, String to, String source, String sourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xAccountApiKey' is set
        if (xAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xAccountApiKey' when calling eventRouterGetAllEventTimestampKeysOfASubAccountFromASpecificNodeForAGivenTimeRange(Async)");
        }
        

        com.squareup.okhttp.Call call = eventRouterGetAllEventTimestampKeysOfASubAccountFromASpecificNodeForAGivenTimeRangeCall(xAccountApiKey, search, type, from, to, source, sourceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Find all events of a sub-account from a specific node for a give time-range
     * @param xAccountApiKey Account API Key (required)
     * @param search search term (optional)
     * @param type search type (optional)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param source data source from which to get timestamp keys subaccount or ip (optional)
     * @param sourceId source id from which to get timestamp keys subaccount or ip (optional)
     * @return List&lt;ModelsQEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ModelsQEvent> eventRouterGetAllEventTimestampKeysOfASubAccountFromASpecificNodeForAGivenTimeRange(String xAccountApiKey, String search, String type, String from, String to, String source, String sourceId) throws ApiException {
        ApiResponse<List<ModelsQEvent>> resp = eventRouterGetAllEventTimestampKeysOfASubAccountFromASpecificNodeForAGivenTimeRangeWithHttpInfo(xAccountApiKey, search, type, from, to, source, sourceId);
        return resp.getData();
    }

    /**
     * 
     * Find all events of a sub-account from a specific node for a give time-range
     * @param xAccountApiKey Account API Key (required)
     * @param search search term (optional)
     * @param type search type (optional)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param source data source from which to get timestamp keys subaccount or ip (optional)
     * @param sourceId source id from which to get timestamp keys subaccount or ip (optional)
     * @return ApiResponse&lt;List&lt;ModelsQEvent&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ModelsQEvent>> eventRouterGetAllEventTimestampKeysOfASubAccountFromASpecificNodeForAGivenTimeRangeWithHttpInfo(String xAccountApiKey, String search, String type, String from, String to, String source, String sourceId) throws ApiException {
        com.squareup.okhttp.Call call = eventRouterGetAllEventTimestampKeysOfASubAccountFromASpecificNodeForAGivenTimeRangeValidateBeforeCall(xAccountApiKey, search, type, from, to, source, sourceId, null, null);
        Type localVarReturnType = new TypeToken<List<ModelsQEvent>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Find all events of a sub-account from a specific node for a give time-range
     * @param xAccountApiKey Account API Key (required)
     * @param search search term (optional)
     * @param type search type (optional)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param source data source from which to get timestamp keys subaccount or ip (optional)
     * @param sourceId source id from which to get timestamp keys subaccount or ip (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call eventRouterGetAllEventTimestampKeysOfASubAccountFromASpecificNodeForAGivenTimeRangeAsync(String xAccountApiKey, String search, String type, String from, String to, String source, String sourceId, final ApiCallback<List<ModelsQEvent>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = eventRouterGetAllEventTimestampKeysOfASubAccountFromASpecificNodeForAGivenTimeRangeValidateBeforeCall(xAccountApiKey, search, type, from, to, source, sourceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ModelsQEvent>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for eventRouterGetAllEventsFromAAccountForAGivenTimeRange
     * @param xAccountApiKey Account API Key (required)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @param search search term (optional)
     * @param type search type (optional)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param source data source from which to get timestamp keys subaccount or ip (optional)
     * @param sourceId source id from which to get timestamp keys subaccount or ip (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call eventRouterGetAllEventsFromAAccountForAGivenTimeRangeCall(String xAccountApiKey, Long offset, Long limit, String search, String type, String from, String to, String source, String sourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/event/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (search != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search", search));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to", to));
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));
        if (sourceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sourceId", sourceId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccountApiKey != null)
        localVarHeaderParams.put("X-Account-ApiKey", apiClient.parameterToString(xAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call eventRouterGetAllEventsFromAAccountForAGivenTimeRangeValidateBeforeCall(String xAccountApiKey, Long offset, Long limit, String search, String type, String from, String to, String source, String sourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xAccountApiKey' is set
        if (xAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xAccountApiKey' when calling eventRouterGetAllEventsFromAAccountForAGivenTimeRange(Async)");
        }
        

        com.squareup.okhttp.Call call = eventRouterGetAllEventsFromAAccountForAGivenTimeRangeCall(xAccountApiKey, offset, limit, search, type, from, to, source, sourceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Find all events from a account for a given time-range
     * @param xAccountApiKey Account API Key (required)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @param search search term (optional)
     * @param type search type (optional)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param source data source from which to get timestamp keys subaccount or ip (optional)
     * @param sourceId source id from which to get timestamp keys subaccount or ip (optional)
     * @return List&lt;ModelsQEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ModelsQEvent> eventRouterGetAllEventsFromAAccountForAGivenTimeRange(String xAccountApiKey, Long offset, Long limit, String search, String type, String from, String to, String source, String sourceId) throws ApiException {
        ApiResponse<List<ModelsQEvent>> resp = eventRouterGetAllEventsFromAAccountForAGivenTimeRangeWithHttpInfo(xAccountApiKey, offset, limit, search, type, from, to, source, sourceId);
        return resp.getData();
    }

    /**
     * 
     * Find all events from a account for a given time-range
     * @param xAccountApiKey Account API Key (required)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @param search search term (optional)
     * @param type search type (optional)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param source data source from which to get timestamp keys subaccount or ip (optional)
     * @param sourceId source id from which to get timestamp keys subaccount or ip (optional)
     * @return ApiResponse&lt;List&lt;ModelsQEvent&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ModelsQEvent>> eventRouterGetAllEventsFromAAccountForAGivenTimeRangeWithHttpInfo(String xAccountApiKey, Long offset, Long limit, String search, String type, String from, String to, String source, String sourceId) throws ApiException {
        com.squareup.okhttp.Call call = eventRouterGetAllEventsFromAAccountForAGivenTimeRangeValidateBeforeCall(xAccountApiKey, offset, limit, search, type, from, to, source, sourceId, null, null);
        Type localVarReturnType = new TypeToken<List<ModelsQEvent>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Find all events from a account for a given time-range
     * @param xAccountApiKey Account API Key (required)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @param search search term (optional)
     * @param type search type (optional)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param source data source from which to get timestamp keys subaccount or ip (optional)
     * @param sourceId source id from which to get timestamp keys subaccount or ip (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call eventRouterGetAllEventsFromAAccountForAGivenTimeRangeAsync(String xAccountApiKey, Long offset, Long limit, String search, String type, String from, String to, String source, String sourceId, final ApiCallback<List<ModelsQEvent>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = eventRouterGetAllEventsFromAAccountForAGivenTimeRangeValidateBeforeCall(xAccountApiKey, offset, limit, search, type, from, to, source, sourceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ModelsQEvent>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for eventRouterGetAllEventsOfAAccountFromASpecificNode
     * @param xAccountApiKey Account API Key (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call eventRouterGetAllEventsOfAAccountFromASpecificNodeCall(String xAccountApiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/event/node";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccountApiKey != null)
        localVarHeaderParams.put("X-Account-ApiKey", apiClient.parameterToString(xAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call eventRouterGetAllEventsOfAAccountFromASpecificNodeValidateBeforeCall(String xAccountApiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xAccountApiKey' is set
        if (xAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xAccountApiKey' when calling eventRouterGetAllEventsOfAAccountFromASpecificNode(Async)");
        }
        

        com.squareup.okhttp.Call call = eventRouterGetAllEventsOfAAccountFromASpecificNodeCall(xAccountApiKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Find all events of a account from a specific node
     * @param xAccountApiKey Account API Key (required)
     * @return List&lt;ModelsQEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ModelsQEvent> eventRouterGetAllEventsOfAAccountFromASpecificNode(String xAccountApiKey) throws ApiException {
        ApiResponse<List<ModelsQEvent>> resp = eventRouterGetAllEventsOfAAccountFromASpecificNodeWithHttpInfo(xAccountApiKey);
        return resp.getData();
    }

    /**
     * 
     * Find all events of a account from a specific node
     * @param xAccountApiKey Account API Key (required)
     * @return ApiResponse&lt;List&lt;ModelsQEvent&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ModelsQEvent>> eventRouterGetAllEventsOfAAccountFromASpecificNodeWithHttpInfo(String xAccountApiKey) throws ApiException {
        com.squareup.okhttp.Call call = eventRouterGetAllEventsOfAAccountFromASpecificNodeValidateBeforeCall(xAccountApiKey, null, null);
        Type localVarReturnType = new TypeToken<List<ModelsQEvent>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Find all events of a account from a specific node
     * @param xAccountApiKey Account API Key (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call eventRouterGetAllEventsOfAAccountFromASpecificNodeAsync(String xAccountApiKey, final ApiCallback<List<ModelsQEvent>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = eventRouterGetAllEventsOfAAccountFromASpecificNodeValidateBeforeCall(xAccountApiKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ModelsQEvent>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for eventRouterGetEventInNode
     * @param xAccountApiKey Account API Key (required)
     * @param eventId the eventId that you want to retrieve (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call eventRouterGetEventInNodeCall(String xAccountApiKey, String eventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/event/node/{eventId}"
            .replaceAll("\\{" + "eventId" + "\\}", apiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccountApiKey != null)
        localVarHeaderParams.put("X-Account-ApiKey", apiClient.parameterToString(xAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call eventRouterGetEventInNodeValidateBeforeCall(String xAccountApiKey, String eventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xAccountApiKey' is set
        if (xAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xAccountApiKey' when calling eventRouterGetEventInNode(Async)");
        }
        
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling eventRouterGetEventInNode(Async)");
        }
        

        com.squareup.okhttp.Call call = eventRouterGetEventInNodeCall(xAccountApiKey, eventId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Find Event From Node by id
     * @param xAccountApiKey Account API Key (required)
     * @param eventId the eventId that you want to retrieve (required)
     * @return ModelsQEvent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelsQEvent eventRouterGetEventInNode(String xAccountApiKey, String eventId) throws ApiException {
        ApiResponse<ModelsQEvent> resp = eventRouterGetEventInNodeWithHttpInfo(xAccountApiKey, eventId);
        return resp.getData();
    }

    /**
     * 
     * Find Event From Node by id
     * @param xAccountApiKey Account API Key (required)
     * @param eventId the eventId that you want to retrieve (required)
     * @return ApiResponse&lt;ModelsQEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelsQEvent> eventRouterGetEventInNodeWithHttpInfo(String xAccountApiKey, String eventId) throws ApiException {
        com.squareup.okhttp.Call call = eventRouterGetEventInNodeValidateBeforeCall(xAccountApiKey, eventId, null, null);
        Type localVarReturnType = new TypeToken<ModelsQEvent>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Find Event From Node by id
     * @param xAccountApiKey Account API Key (required)
     * @param eventId the eventId that you want to retrieve (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call eventRouterGetEventInNodeAsync(String xAccountApiKey, String eventId, final ApiCallback<ModelsQEvent> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = eventRouterGetEventInNodeValidateBeforeCall(xAccountApiKey, eventId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelsQEvent>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
