/*
 * SendPost API
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ModelsComment;
import io.swagger.client.model.ModelsCountStat;
import io.swagger.client.model.ModelsEComment;
import io.swagger.client.model.ModelsEIncident;
import io.swagger.client.model.ModelsIncident;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountincidentApi {
    private ApiClient apiClient;

    public AccountincidentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountincidentApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for incidentRouterAdd
     * @param xAccountApiKey Account API Key (required)
     * @param incidentId the incident id (required)
     * @param body The Comment content (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call incidentRouterAddCall(String xAccountApiKey, Long incidentId, ModelsEComment body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/account/incident/{incidentId}/comment"
            .replaceAll("\\{" + "incidentId" + "\\}", apiClient.escapeString(incidentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccountApiKey != null)
        localVarHeaderParams.put("X-Account-ApiKey", apiClient.parameterToString(xAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call incidentRouterAddValidateBeforeCall(String xAccountApiKey, Long incidentId, ModelsEComment body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xAccountApiKey' is set
        if (xAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xAccountApiKey' when calling incidentRouterAdd(Async)");
        }
        
        // verify the required parameter 'incidentId' is set
        if (incidentId == null) {
            throw new ApiException("Missing the required parameter 'incidentId' when calling incidentRouterAdd(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling incidentRouterAdd(Async)");
        }
        

        com.squareup.okhttp.Call call = incidentRouterAddCall(xAccountApiKey, incidentId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Add comment to Incident
     * @param xAccountApiKey Account API Key (required)
     * @param incidentId the incident id (required)
     * @param body The Comment content (required)
     * @return ModelsComment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelsComment incidentRouterAdd(String xAccountApiKey, Long incidentId, ModelsEComment body) throws ApiException {
        ApiResponse<ModelsComment> resp = incidentRouterAddWithHttpInfo(xAccountApiKey, incidentId, body);
        return resp.getData();
    }

    /**
     * 
     * Add comment to Incident
     * @param xAccountApiKey Account API Key (required)
     * @param incidentId the incident id (required)
     * @param body The Comment content (required)
     * @return ApiResponse&lt;ModelsComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelsComment> incidentRouterAddWithHttpInfo(String xAccountApiKey, Long incidentId, ModelsEComment body) throws ApiException {
        com.squareup.okhttp.Call call = incidentRouterAddValidateBeforeCall(xAccountApiKey, incidentId, body, null, null);
        Type localVarReturnType = new TypeToken<ModelsComment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add comment to Incident
     * @param xAccountApiKey Account API Key (required)
     * @param incidentId the incident id (required)
     * @param body The Comment content (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call incidentRouterAddAsync(String xAccountApiKey, Long incidentId, ModelsEComment body, final ApiCallback<ModelsComment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = incidentRouterAddValidateBeforeCall(xAccountApiKey, incidentId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelsComment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for incidentRouterCount
     * @param xAccountApiKey Account API Key (required)
     * @param status status (optional)
     * @param tag status (optional)
     * @param search search term (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call incidentRouterCountCall(String xAccountApiKey, Long status, Long tag, String search, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/incident/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (tag != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tag", tag));
        if (search != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search", search));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccountApiKey != null)
        localVarHeaderParams.put("X-Account-ApiKey", apiClient.parameterToString(xAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call incidentRouterCountValidateBeforeCall(String xAccountApiKey, Long status, Long tag, String search, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xAccountApiKey' is set
        if (xAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xAccountApiKey' when calling incidentRouterCount(Async)");
        }
        

        com.squareup.okhttp.Call call = incidentRouterCountCall(xAccountApiKey, status, tag, search, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Count Total Incidents
     * @param xAccountApiKey Account API Key (required)
     * @param status status (optional)
     * @param tag status (optional)
     * @param search search term (optional)
     * @return ModelsCountStat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelsCountStat incidentRouterCount(String xAccountApiKey, Long status, Long tag, String search) throws ApiException {
        ApiResponse<ModelsCountStat> resp = incidentRouterCountWithHttpInfo(xAccountApiKey, status, tag, search);
        return resp.getData();
    }

    /**
     * 
     * Count Total Incidents
     * @param xAccountApiKey Account API Key (required)
     * @param status status (optional)
     * @param tag status (optional)
     * @param search search term (optional)
     * @return ApiResponse&lt;ModelsCountStat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelsCountStat> incidentRouterCountWithHttpInfo(String xAccountApiKey, Long status, Long tag, String search) throws ApiException {
        com.squareup.okhttp.Call call = incidentRouterCountValidateBeforeCall(xAccountApiKey, status, tag, search, null, null);
        Type localVarReturnType = new TypeToken<ModelsCountStat>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Count Total Incidents
     * @param xAccountApiKey Account API Key (required)
     * @param status status (optional)
     * @param tag status (optional)
     * @param search search term (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call incidentRouterCountAsync(String xAccountApiKey, Long status, Long tag, String search, final ApiCallback<ModelsCountStat> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = incidentRouterCountValidateBeforeCall(xAccountApiKey, status, tag, search, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelsCountStat>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for incidentRouterCreate
     * @param xAccountApiKey Account API Key (required)
     * @param body The Incident content (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call incidentRouterCreateCall(String xAccountApiKey, ModelsEIncident body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/account/incident/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccountApiKey != null)
        localVarHeaderParams.put("X-Account-ApiKey", apiClient.parameterToString(xAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call incidentRouterCreateValidateBeforeCall(String xAccountApiKey, ModelsEIncident body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xAccountApiKey' is set
        if (xAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xAccountApiKey' when calling incidentRouterCreate(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling incidentRouterCreate(Async)");
        }
        

        com.squareup.okhttp.Call call = incidentRouterCreateCall(xAccountApiKey, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create Incident
     * @param xAccountApiKey Account API Key (required)
     * @param body The Incident content (required)
     * @return ModelsIncident
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelsIncident incidentRouterCreate(String xAccountApiKey, ModelsEIncident body) throws ApiException {
        ApiResponse<ModelsIncident> resp = incidentRouterCreateWithHttpInfo(xAccountApiKey, body);
        return resp.getData();
    }

    /**
     * 
     * Create Incident
     * @param xAccountApiKey Account API Key (required)
     * @param body The Incident content (required)
     * @return ApiResponse&lt;ModelsIncident&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelsIncident> incidentRouterCreateWithHttpInfo(String xAccountApiKey, ModelsEIncident body) throws ApiException {
        com.squareup.okhttp.Call call = incidentRouterCreateValidateBeforeCall(xAccountApiKey, body, null, null);
        Type localVarReturnType = new TypeToken<ModelsIncident>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create Incident
     * @param xAccountApiKey Account API Key (required)
     * @param body The Incident content (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call incidentRouterCreateAsync(String xAccountApiKey, ModelsEIncident body, final ApiCallback<ModelsIncident> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = incidentRouterCreateValidateBeforeCall(xAccountApiKey, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelsIncident>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for incidentRouterGetAll
     * @param xAccountApiKey Account API Key (required)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @param search search term (optional)
     * @param status status (optional)
     * @param tag status (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call incidentRouterGetAllCall(String xAccountApiKey, Long offset, Long limit, String search, Long status, Long tag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/incident/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (search != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search", search));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (tag != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tag", tag));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccountApiKey != null)
        localVarHeaderParams.put("X-Account-ApiKey", apiClient.parameterToString(xAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call incidentRouterGetAllValidateBeforeCall(String xAccountApiKey, Long offset, Long limit, String search, Long status, Long tag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xAccountApiKey' is set
        if (xAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xAccountApiKey' when calling incidentRouterGetAll(Async)");
        }
        

        com.squareup.okhttp.Call call = incidentRouterGetAllCall(xAccountApiKey, offset, limit, search, status, tag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get All Incidents
     * @param xAccountApiKey Account API Key (required)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @param search search term (optional)
     * @param status status (optional)
     * @param tag status (optional)
     * @return List&lt;ModelsIncident&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ModelsIncident> incidentRouterGetAll(String xAccountApiKey, Long offset, Long limit, String search, Long status, Long tag) throws ApiException {
        ApiResponse<List<ModelsIncident>> resp = incidentRouterGetAllWithHttpInfo(xAccountApiKey, offset, limit, search, status, tag);
        return resp.getData();
    }

    /**
     * 
     * Get All Incidents
     * @param xAccountApiKey Account API Key (required)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @param search search term (optional)
     * @param status status (optional)
     * @param tag status (optional)
     * @return ApiResponse&lt;List&lt;ModelsIncident&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ModelsIncident>> incidentRouterGetAllWithHttpInfo(String xAccountApiKey, Long offset, Long limit, String search, Long status, Long tag) throws ApiException {
        com.squareup.okhttp.Call call = incidentRouterGetAllValidateBeforeCall(xAccountApiKey, offset, limit, search, status, tag, null, null);
        Type localVarReturnType = new TypeToken<List<ModelsIncident>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get All Incidents
     * @param xAccountApiKey Account API Key (required)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @param search search term (optional)
     * @param status status (optional)
     * @param tag status (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call incidentRouterGetAllAsync(String xAccountApiKey, Long offset, Long limit, String search, Long status, Long tag, final ApiCallback<List<ModelsIncident>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = incidentRouterGetAllValidateBeforeCall(xAccountApiKey, offset, limit, search, status, tag, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ModelsIncident>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for incidentRouterGetAllComments
     * @param xAccountApiKey Account API Key (required)
     * @param incidentId the IncidentId you want to get comments for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call incidentRouterGetAllCommentsCall(String xAccountApiKey, Long incidentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/incident/{incidentId}/comment"
            .replaceAll("\\{" + "incidentId" + "\\}", apiClient.escapeString(incidentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccountApiKey != null)
        localVarHeaderParams.put("X-Account-ApiKey", apiClient.parameterToString(xAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call incidentRouterGetAllCommentsValidateBeforeCall(String xAccountApiKey, Long incidentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xAccountApiKey' is set
        if (xAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xAccountApiKey' when calling incidentRouterGetAllComments(Async)");
        }
        
        // verify the required parameter 'incidentId' is set
        if (incidentId == null) {
            throw new ApiException("Missing the required parameter 'incidentId' when calling incidentRouterGetAllComments(Async)");
        }
        

        com.squareup.okhttp.Call call = incidentRouterGetAllCommentsCall(xAccountApiKey, incidentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get All Comments Associated with Incident
     * @param xAccountApiKey Account API Key (required)
     * @param incidentId the IncidentId you want to get comments for (required)
     * @return List&lt;ModelsComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ModelsComment> incidentRouterGetAllComments(String xAccountApiKey, Long incidentId) throws ApiException {
        ApiResponse<List<ModelsComment>> resp = incidentRouterGetAllCommentsWithHttpInfo(xAccountApiKey, incidentId);
        return resp.getData();
    }

    /**
     * 
     * Get All Comments Associated with Incident
     * @param xAccountApiKey Account API Key (required)
     * @param incidentId the IncidentId you want to get comments for (required)
     * @return ApiResponse&lt;List&lt;ModelsComment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ModelsComment>> incidentRouterGetAllCommentsWithHttpInfo(String xAccountApiKey, Long incidentId) throws ApiException {
        com.squareup.okhttp.Call call = incidentRouterGetAllCommentsValidateBeforeCall(xAccountApiKey, incidentId, null, null);
        Type localVarReturnType = new TypeToken<List<ModelsComment>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get All Comments Associated with Incident
     * @param xAccountApiKey Account API Key (required)
     * @param incidentId the IncidentId you want to get comments for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call incidentRouterGetAllCommentsAsync(String xAccountApiKey, Long incidentId, final ApiCallback<List<ModelsComment>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = incidentRouterGetAllCommentsValidateBeforeCall(xAccountApiKey, incidentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ModelsComment>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for incidentRouterGetIncident
     * @param xAccountApiKey Account API Key (required)
     * @param incidentId the IncidentId you want to get (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call incidentRouterGetIncidentCall(String xAccountApiKey, Long incidentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/incident/{incidentId}"
            .replaceAll("\\{" + "incidentId" + "\\}", apiClient.escapeString(incidentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccountApiKey != null)
        localVarHeaderParams.put("X-Account-ApiKey", apiClient.parameterToString(xAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call incidentRouterGetIncidentValidateBeforeCall(String xAccountApiKey, Long incidentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xAccountApiKey' is set
        if (xAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xAccountApiKey' when calling incidentRouterGetIncident(Async)");
        }
        
        // verify the required parameter 'incidentId' is set
        if (incidentId == null) {
            throw new ApiException("Missing the required parameter 'incidentId' when calling incidentRouterGetIncident(Async)");
        }
        

        com.squareup.okhttp.Call call = incidentRouterGetIncidentCall(xAccountApiKey, incidentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Find Incident by incidentId
     * @param xAccountApiKey Account API Key (required)
     * @param incidentId the IncidentId you want to get (required)
     * @return ModelsIncident
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelsIncident incidentRouterGetIncident(String xAccountApiKey, Long incidentId) throws ApiException {
        ApiResponse<ModelsIncident> resp = incidentRouterGetIncidentWithHttpInfo(xAccountApiKey, incidentId);
        return resp.getData();
    }

    /**
     * 
     * Find Incident by incidentId
     * @param xAccountApiKey Account API Key (required)
     * @param incidentId the IncidentId you want to get (required)
     * @return ApiResponse&lt;ModelsIncident&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelsIncident> incidentRouterGetIncidentWithHttpInfo(String xAccountApiKey, Long incidentId) throws ApiException {
        com.squareup.okhttp.Call call = incidentRouterGetIncidentValidateBeforeCall(xAccountApiKey, incidentId, null, null);
        Type localVarReturnType = new TypeToken<ModelsIncident>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Find Incident by incidentId
     * @param xAccountApiKey Account API Key (required)
     * @param incidentId the IncidentId you want to get (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call incidentRouterGetIncidentAsync(String xAccountApiKey, Long incidentId, final ApiCallback<ModelsIncident> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = incidentRouterGetIncidentValidateBeforeCall(xAccountApiKey, incidentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelsIncident>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for incidentRouterUpdate
     * @param xAccountApiKey Account API Key (required)
     * @param incidentId the Incident Id you want to update (required)
     * @param body The Incident content (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call incidentRouterUpdateCall(String xAccountApiKey, Long incidentId, ModelsEIncident body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/account/incident/{incidentId}"
            .replaceAll("\\{" + "incidentId" + "\\}", apiClient.escapeString(incidentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccountApiKey != null)
        localVarHeaderParams.put("X-Account-ApiKey", apiClient.parameterToString(xAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call incidentRouterUpdateValidateBeforeCall(String xAccountApiKey, Long incidentId, ModelsEIncident body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xAccountApiKey' is set
        if (xAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xAccountApiKey' when calling incidentRouterUpdate(Async)");
        }
        
        // verify the required parameter 'incidentId' is set
        if (incidentId == null) {
            throw new ApiException("Missing the required parameter 'incidentId' when calling incidentRouterUpdate(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling incidentRouterUpdate(Async)");
        }
        

        com.squareup.okhttp.Call call = incidentRouterUpdateCall(xAccountApiKey, incidentId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Update Incident
     * @param xAccountApiKey Account API Key (required)
     * @param incidentId the Incident Id you want to update (required)
     * @param body The Incident content (required)
     * @return ModelsIncident
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelsIncident incidentRouterUpdate(String xAccountApiKey, Long incidentId, ModelsEIncident body) throws ApiException {
        ApiResponse<ModelsIncident> resp = incidentRouterUpdateWithHttpInfo(xAccountApiKey, incidentId, body);
        return resp.getData();
    }

    /**
     * 
     * Update Incident
     * @param xAccountApiKey Account API Key (required)
     * @param incidentId the Incident Id you want to update (required)
     * @param body The Incident content (required)
     * @return ApiResponse&lt;ModelsIncident&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelsIncident> incidentRouterUpdateWithHttpInfo(String xAccountApiKey, Long incidentId, ModelsEIncident body) throws ApiException {
        com.squareup.okhttp.Call call = incidentRouterUpdateValidateBeforeCall(xAccountApiKey, incidentId, body, null, null);
        Type localVarReturnType = new TypeToken<ModelsIncident>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update Incident
     * @param xAccountApiKey Account API Key (required)
     * @param incidentId the Incident Id you want to update (required)
     * @param body The Incident content (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call incidentRouterUpdateAsync(String xAccountApiKey, Long incidentId, ModelsEIncident body, final ApiCallback<ModelsIncident> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = incidentRouterUpdateValidateBeforeCall(xAccountApiKey, incidentId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelsIncident>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
