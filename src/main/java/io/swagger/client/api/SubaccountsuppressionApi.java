/*
 * SendPost API
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ModelsCountStat;
import io.swagger.client.model.ModelsRDSuppression;
import io.swagger.client.model.ModelsRSuppression;
import io.swagger.client.model.ModelsSuppression;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SubaccountsuppressionApi {
    private ApiClient apiClient;

    public SubaccountsuppressionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SubaccountsuppressionApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for suppressionRouterCount
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call suppressionRouterCountCall(String xSubAccountApiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subaccount/suppression/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xSubAccountApiKey != null)
        localVarHeaderParams.put("X-SubAccount-ApiKey", apiClient.parameterToString(xSubAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call suppressionRouterCountValidateBeforeCall(String xSubAccountApiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xSubAccountApiKey' is set
        if (xSubAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xSubAccountApiKey' when calling suppressionRouterCount(Async)");
        }
        

        com.squareup.okhttp.Call call = suppressionRouterCountCall(xSubAccountApiKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Count Total Suppressions
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @return ModelsCountStat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelsCountStat suppressionRouterCount(String xSubAccountApiKey) throws ApiException {
        ApiResponse<ModelsCountStat> resp = suppressionRouterCountWithHttpInfo(xSubAccountApiKey);
        return resp.getData();
    }

    /**
     * 
     * Count Total Suppressions
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @return ApiResponse&lt;ModelsCountStat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelsCountStat> suppressionRouterCountWithHttpInfo(String xSubAccountApiKey) throws ApiException {
        com.squareup.okhttp.Call call = suppressionRouterCountValidateBeforeCall(xSubAccountApiKey, null, null);
        Type localVarReturnType = new TypeToken<ModelsCountStat>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Count Total Suppressions
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call suppressionRouterCountAsync(String xSubAccountApiKey, final ApiCallback<ModelsCountStat> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = suppressionRouterCountValidateBeforeCall(xSubAccountApiKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelsCountStat>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for suppressionRouterCreateSuppressions
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param body Suppression content (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call suppressionRouterCreateSuppressionsCall(String xSubAccountApiKey, ModelsRSuppression body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/subaccount/suppression/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xSubAccountApiKey != null)
        localVarHeaderParams.put("X-SubAccount-ApiKey", apiClient.parameterToString(xSubAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call suppressionRouterCreateSuppressionsValidateBeforeCall(String xSubAccountApiKey, ModelsRSuppression body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xSubAccountApiKey' is set
        if (xSubAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xSubAccountApiKey' when calling suppressionRouterCreateSuppressions(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling suppressionRouterCreateSuppressions(Async)");
        }
        

        com.squareup.okhttp.Call call = suppressionRouterCreateSuppressionsCall(xSubAccountApiKey, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Add Email Addresses To Suppression List
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param body Suppression content (required)
     * @return ModelsSuppression
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelsSuppression suppressionRouterCreateSuppressions(String xSubAccountApiKey, ModelsRSuppression body) throws ApiException {
        ApiResponse<ModelsSuppression> resp = suppressionRouterCreateSuppressionsWithHttpInfo(xSubAccountApiKey, body);
        return resp.getData();
    }

    /**
     * 
     * Add Email Addresses To Suppression List
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param body Suppression content (required)
     * @return ApiResponse&lt;ModelsSuppression&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelsSuppression> suppressionRouterCreateSuppressionsWithHttpInfo(String xSubAccountApiKey, ModelsRSuppression body) throws ApiException {
        com.squareup.okhttp.Call call = suppressionRouterCreateSuppressionsValidateBeforeCall(xSubAccountApiKey, body, null, null);
        Type localVarReturnType = new TypeToken<ModelsSuppression>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add Email Addresses To Suppression List
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param body Suppression content (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call suppressionRouterCreateSuppressionsAsync(String xSubAccountApiKey, ModelsRSuppression body, final ApiCallback<ModelsSuppression> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = suppressionRouterCreateSuppressionsValidateBeforeCall(xSubAccountApiKey, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelsSuppression>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for suppressionRouterCreateSuppressionsInSuppressionFilter
     * @param body Add suppressions to suppression filter (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call suppressionRouterCreateSuppressionsInSuppressionFilterCall(ModelsSuppression body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/subaccount/suppression/filter";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call suppressionRouterCreateSuppressionsInSuppressionFilterValidateBeforeCall(ModelsSuppression body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling suppressionRouterCreateSuppressionsInSuppressionFilter(Async)");
        }
        

        com.squareup.okhttp.Call call = suppressionRouterCreateSuppressionsInSuppressionFilterCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Add Email Addresses To Suppression Filter
     * @param body Add suppressions to suppression filter (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void suppressionRouterCreateSuppressionsInSuppressionFilter(ModelsSuppression body) throws ApiException {
        suppressionRouterCreateSuppressionsInSuppressionFilterWithHttpInfo(body);
    }

    /**
     * 
     * Add Email Addresses To Suppression Filter
     * @param body Add suppressions to suppression filter (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> suppressionRouterCreateSuppressionsInSuppressionFilterWithHttpInfo(ModelsSuppression body) throws ApiException {
        com.squareup.okhttp.Call call = suppressionRouterCreateSuppressionsInSuppressionFilterValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Add Email Addresses To Suppression Filter
     * @param body Add suppressions to suppression filter (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call suppressionRouterCreateSuppressionsInSuppressionFilterAsync(ModelsSuppression body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = suppressionRouterCreateSuppressionsInSuppressionFilterValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for suppressionRouterDeleteSuppression
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param body Suppression content (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call suppressionRouterDeleteSuppressionCall(String xSubAccountApiKey, ModelsRDSuppression body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/subaccount/suppression/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xSubAccountApiKey != null)
        localVarHeaderParams.put("X-SubAccount-ApiKey", apiClient.parameterToString(xSubAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call suppressionRouterDeleteSuppressionValidateBeforeCall(String xSubAccountApiKey, ModelsRDSuppression body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xSubAccountApiKey' is set
        if (xSubAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xSubAccountApiKey' when calling suppressionRouterDeleteSuppression(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling suppressionRouterDeleteSuppression(Async)");
        }
        

        com.squareup.okhttp.Call call = suppressionRouterDeleteSuppressionCall(xSubAccountApiKey, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete specific emails which are in suppression list
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param body Suppression content (required)
     * @return ModelsSuppression
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelsSuppression suppressionRouterDeleteSuppression(String xSubAccountApiKey, ModelsRDSuppression body) throws ApiException {
        ApiResponse<ModelsSuppression> resp = suppressionRouterDeleteSuppressionWithHttpInfo(xSubAccountApiKey, body);
        return resp.getData();
    }

    /**
     * 
     * Delete specific emails which are in suppression list
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param body Suppression content (required)
     * @return ApiResponse&lt;ModelsSuppression&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelsSuppression> suppressionRouterDeleteSuppressionWithHttpInfo(String xSubAccountApiKey, ModelsRDSuppression body) throws ApiException {
        com.squareup.okhttp.Call call = suppressionRouterDeleteSuppressionValidateBeforeCall(xSubAccountApiKey, body, null, null);
        Type localVarReturnType = new TypeToken<ModelsSuppression>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete specific emails which are in suppression list
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param body Suppression content (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call suppressionRouterDeleteSuppressionAsync(String xSubAccountApiKey, ModelsRDSuppression body, final ApiCallback<ModelsSuppression> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = suppressionRouterDeleteSuppressionValidateBeforeCall(xSubAccountApiKey, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelsSuppression>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for suppressionRouterDeleteSuppressionsInSuppressionFilter
     * @param body Suppression content (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call suppressionRouterDeleteSuppressionsInSuppressionFilterCall(ModelsSuppression body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/subaccount/suppression/filter";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call suppressionRouterDeleteSuppressionsInSuppressionFilterValidateBeforeCall(ModelsSuppression body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling suppressionRouterDeleteSuppressionsInSuppressionFilter(Async)");
        }
        

        com.squareup.okhttp.Call call = suppressionRouterDeleteSuppressionsInSuppressionFilterCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete specific emails which are in suppression list
     * @param body Suppression content (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void suppressionRouterDeleteSuppressionsInSuppressionFilter(ModelsSuppression body) throws ApiException {
        suppressionRouterDeleteSuppressionsInSuppressionFilterWithHttpInfo(body);
    }

    /**
     * 
     * Delete specific emails which are in suppression list
     * @param body Suppression content (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> suppressionRouterDeleteSuppressionsInSuppressionFilterWithHttpInfo(ModelsSuppression body) throws ApiException {
        com.squareup.okhttp.Call call = suppressionRouterDeleteSuppressionsInSuppressionFilterValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete specific emails which are in suppression list
     * @param body Suppression content (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call suppressionRouterDeleteSuppressionsInSuppressionFilterAsync(ModelsSuppression body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = suppressionRouterDeleteSuppressionsInSuppressionFilterValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for suppressionRouterGetAllSuppressions
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @param search search (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call suppressionRouterGetAllSuppressionsCall(String xSubAccountApiKey, Long offset, Long limit, String search, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subaccount/suppression/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (search != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search", search));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xSubAccountApiKey != null)
        localVarHeaderParams.put("X-SubAccount-ApiKey", apiClient.parameterToString(xSubAccountApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call suppressionRouterGetAllSuppressionsValidateBeforeCall(String xSubAccountApiKey, Long offset, Long limit, String search, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xSubAccountApiKey' is set
        if (xSubAccountApiKey == null) {
            throw new ApiException("Missing the required parameter 'xSubAccountApiKey' when calling suppressionRouterGetAllSuppressions(Async)");
        }
        

        com.squareup.okhttp.Call call = suppressionRouterGetAllSuppressionsCall(xSubAccountApiKey, offset, limit, search, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get all suppressions
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @param search search (optional)
     * @return List&lt;ModelsSuppression&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ModelsSuppression> suppressionRouterGetAllSuppressions(String xSubAccountApiKey, Long offset, Long limit, String search) throws ApiException {
        ApiResponse<List<ModelsSuppression>> resp = suppressionRouterGetAllSuppressionsWithHttpInfo(xSubAccountApiKey, offset, limit, search);
        return resp.getData();
    }

    /**
     * 
     * Get all suppressions
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @param search search (optional)
     * @return ApiResponse&lt;List&lt;ModelsSuppression&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ModelsSuppression>> suppressionRouterGetAllSuppressionsWithHttpInfo(String xSubAccountApiKey, Long offset, Long limit, String search) throws ApiException {
        com.squareup.okhttp.Call call = suppressionRouterGetAllSuppressionsValidateBeforeCall(xSubAccountApiKey, offset, limit, search, null, null);
        Type localVarReturnType = new TypeToken<List<ModelsSuppression>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all suppressions
     * @param xSubAccountApiKey Sub-Account API Key (required)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @param search search (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call suppressionRouterGetAllSuppressionsAsync(String xSubAccountApiKey, Long offset, Long limit, String search, final ApiCallback<List<ModelsSuppression>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = suppressionRouterGetAllSuppressionsValidateBeforeCall(xSubAccountApiKey, offset, limit, search, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ModelsSuppression>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
