/*
 * SendPost API
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ModelsCountStat;
import io.swagger.client.model.ModelsDeleteResponse;
import io.swagger.client.model.ModelsESender;
import io.swagger.client.model.ModelsSender;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SubaccountsenderApi
 */
@Ignore
public class SubaccountsenderApiTest {

    private final SubaccountsenderApi api = new SubaccountsenderApi();

    
    /**
     * 
     *
     * Count Total Senders
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void senderRouterCountTest() throws ApiException {
        String xSubAccountApiKey = null;
        ModelsCountStat response = api.senderRouterCount(xSubAccountApiKey);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create Sender
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void senderRouterCreateTest() throws ApiException {
        String xSubAccountApiKey = null;
        ModelsESender body = null;
        ModelsSender response = api.senderRouterCreate(xSubAccountApiKey, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete Sender
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void senderRouterDeleteTest() throws ApiException {
        String xSubAccountApiKey = null;
        Long senderId = null;
        ModelsDeleteResponse response = api.senderRouterDelete(xSubAccountApiKey, senderId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Find Sender by SenderId
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void senderRouterGetTest() throws ApiException {
        String xSubAccountApiKey = null;
        Long senderId = null;
        ModelsSender response = api.senderRouterGet(xSubAccountApiKey, senderId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get All Senders
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void senderRouterGetAllTest() throws ApiException {
        String xSubAccountApiKey = null;
        Long offset = null;
        Long limit = null;
        String search = null;
        List<ModelsSender> response = api.senderRouterGetAll(xSubAccountApiKey, offset, limit, search);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update Sender
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void senderRouterUpdateTest() throws ApiException {
        String xSubAccountApiKey = null;
        Long senderId = null;
        ModelsESender body = null;
        ModelsSender response = api.senderRouterUpdate(xSubAccountApiKey, senderId, body);

        // TODO: test validations
    }
    
}
