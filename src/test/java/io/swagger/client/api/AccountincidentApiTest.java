/*
 * SendPost API
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ModelsComment;
import io.swagger.client.model.ModelsCountStat;
import io.swagger.client.model.ModelsEComment;
import io.swagger.client.model.ModelsEIncident;
import io.swagger.client.model.ModelsIncident;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountincidentApi
 */
@Ignore
public class AccountincidentApiTest {

    private final AccountincidentApi api = new AccountincidentApi();

    
    /**
     * 
     *
     * Add comment to Incident
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void incidentRouterAddTest() throws ApiException {
        String xAccountApiKey = null;
        Long incidentId = null;
        ModelsEComment body = null;
        ModelsComment response = api.incidentRouterAdd(xAccountApiKey, incidentId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Count Total Incidents
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void incidentRouterCountTest() throws ApiException {
        String xAccountApiKey = null;
        Long status = null;
        Long tag = null;
        String search = null;
        ModelsCountStat response = api.incidentRouterCount(xAccountApiKey, status, tag, search);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create Incident
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void incidentRouterCreateTest() throws ApiException {
        String xAccountApiKey = null;
        ModelsEIncident body = null;
        ModelsIncident response = api.incidentRouterCreate(xAccountApiKey, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get All Incidents
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void incidentRouterGetAllTest() throws ApiException {
        String xAccountApiKey = null;
        Long offset = null;
        Long limit = null;
        String search = null;
        Long status = null;
        Long tag = null;
        List<ModelsIncident> response = api.incidentRouterGetAll(xAccountApiKey, offset, limit, search, status, tag);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get All Comments Associated with Incident
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void incidentRouterGetAllCommentsTest() throws ApiException {
        String xAccountApiKey = null;
        Long incidentId = null;
        List<ModelsComment> response = api.incidentRouterGetAllComments(xAccountApiKey, incidentId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Find Incident by incidentId
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void incidentRouterGetIncidentTest() throws ApiException {
        String xAccountApiKey = null;
        Long incidentId = null;
        ModelsIncident response = api.incidentRouterGetIncident(xAccountApiKey, incidentId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update Incident
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void incidentRouterUpdateTest() throws ApiException {
        String xAccountApiKey = null;
        Long incidentId = null;
        ModelsEIncident body = null;
        ModelsIncident response = api.incidentRouterUpdate(xAccountApiKey, incidentId, body);

        // TODO: test validations
    }
    
}
