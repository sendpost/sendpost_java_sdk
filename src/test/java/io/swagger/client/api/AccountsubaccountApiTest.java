/*
 * SendPost API
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ModelsCountStat;
import io.swagger.client.model.ModelsDeleteResponse;
import io.swagger.client.model.ModelsESubAccount;
import io.swagger.client.model.ModelsSubAccount;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountsubaccountApi
 */
@Ignore
public class AccountsubaccountApiTest {

    private final AccountsubaccountApi api = new AccountsubaccountApi();

    
    /**
     * 
     *
     * Count Total Subaccounts
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void subAccountRouterCountTest() throws ApiException {
        String xAccountApiKey = null;
        String filterBy = null;
        Long filterValue = null;
        String search = null;
        ModelsCountStat response = api.subAccountRouterCount(xAccountApiKey, filterBy, filterValue, search);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create SubAccount
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void subAccountRouterCreateTest() throws ApiException {
        String xAccountApiKey = null;
        ModelsESubAccount body = null;
        ModelsSubAccount response = api.subAccountRouterCreate(xAccountApiKey, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete SubAccount
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void subAccountRouterDeleteTest() throws ApiException {
        String xAccountApiKey = null;
        Long subAccountId = null;
        ModelsDeleteResponse response = api.subAccountRouterDelete(xAccountApiKey, subAccountId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Find SubAccount by SubAccountId
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void subAccountRouterGetTest() throws ApiException {
        String xAccountApiKey = null;
        Long subAccountId = null;
        ModelsSubAccount response = api.subAccountRouterGet(xAccountApiKey, subAccountId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get All SubAccounts
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void subAccountRouterGetAllTest() throws ApiException {
        String xAccountApiKey = null;
        Long offset = null;
        Long limit = null;
        String filterBy = null;
        Long filterValue = null;
        String search = null;
        List<ModelsSubAccount> response = api.subAccountRouterGetAll(xAccountApiKey, offset, limit, filterBy, filterValue, search);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update SubAccount
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void subAccountRouterUpdateTest() throws ApiException {
        String xAccountApiKey = null;
        Long subAccountId = null;
        ModelsESubAccount body = null;
        ModelsSubAccount response = api.subAccountRouterUpdate(xAccountApiKey, subAccountId, body);

        // TODO: test validations
    }
    
}
